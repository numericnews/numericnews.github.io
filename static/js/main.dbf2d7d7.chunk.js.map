{"version":3,"sources":["../download-data.ts","../utils.ts","../regions.ts","../tamponi.ts","components/CacheBuster.js","components/multiselect.js","components/ploty.js","components/layout.js","App.js","serviceWorker.js","index.js","../provinces.ts","../totaleCasi.ts","../analyze.ts"],"names":["this","initializing","i","p","global","appVersion","packageJson","version","CacheBuster","props","state","loading","isLatestVersion","refreshCacheAndReload","console","log","caches","window","keys","then","names","name","delete","location","reload","fetch","response","json","meta","latestVersion","versionA","versionB","versionsA","split","versionsB","length","a","Number","shift","b","isNaN","semverGreaterThan","setState","children","React","Component","icon","fontSize","checkedIcon","useStyles","makeStyles","theme","input","color","MultiSelect","classes","Autocomplete","multiple","size","disablePortal","options","lists","disableCloseOnSelect","getOptionLabel","option","value","values","onChange","event","newValue","setvalue","type","style","background","padding","renderOption","selected","Fragment","Checkbox","marginRight","checked","renderInput","params","TextField","InputProps","variant","label","placeholder","id","Math","random","globalState","exponentialGrowthComment","Typography","component","href","src","height","width","alt","TabPanel","index","other","role","hidden","aria-labelledby","Box","filterByStartDate","startDate","data","startIdx","findIndex","r","getTime","concat","slice","PlotComponent","date","Date","toLocaleString","projPlotStart","activeStep","open","moment","subtract","toDate","types","field","regionValues","provinceValues","GoogleCharts","load","_draw","getSelectedItems","ev","addEventListener","afterOrientationChange","innerWidth","removeEventListener","orHandler","onOrientationChange","bind","prevProps","prevState","_","Object","resize","selectedItems","colorStr","Dygraph","toRGB_","floor","g","e","ctx","drawingContext","points","y_bottom","dygraph","toDomYCoord","fillStyle","darkenColor","min_sep","Infinity","sep","canvasx","bar_width","j","center_x","fillRect","canvasy","strokeRect","labels","getLabels","x","series","map","dashHTML","labelHTML","nowZeroSec","setSeconds","setMilliseconds","html","xHTML","dateString_","forEach","isVisible","labeledData","yHTML","isHighlighted","strokePattern","getOption","border","render","initProvinces","generalPlotGrowthRate","grPlot","drawGrowthRatePlot","yBounds","smallYBounds","lastDate","lastGrowthRates","column","gviz","api","visualization","arrayToDataTable","legendFormatter","strokeWidth","legend","labelsDiv","colorValue","digitsAfterDecimal","valueRange","drawGrowthRateGraph","document","getElementById","row","seriesName","ann","ystr","yval","datestr","format","maxlength","max","text","push","xval","tickHeight","setAnnotations","point","annotationOnHighlight","onlyVelocity","onlyTotaleCasi","filter","c","generalPlot","plot","drawChartPlot","plotTotale","assign","totaleOptions","plotVel","velOptions","drawChartGraphVel","destroy","ready","drawChartGraphTotale","projectGeneralPlot","gr","safeMax","calculateProjectionChart","projectionPlot","drawProjectionChartGraph","updateOptions","pointClickRadius","pointClickCallback","idx","maxDate","file","testsPlot","plotT","plotP","firstCasiTestati","firstCasiTestatiMap","yPBounds","optionsT","drawTampTChartGraph","optionsP","min","drawTampPChartGraph","drawChart","drawTamponiChart","drawGrowthRate","drawProjectionChart","handleDrawerToggle","key","lastMonth","clickToChangeStartDate","onClick","lastGrowthRate","firstCasiTestatiDate","firstCasiTestatiDateStr","tamponiExplanation","className","isFinalContent","d","n","toFixed","join","contentBody","maxWidth","innerHeight","provRegs","doubleClickZoomHint","left","top","position","getTabBar","Tabs","handleChange","aria-label","scrollButtons","Tab","clientHeight","Grid","container","item","xs","md","getContent","root","drawer","breakpoints","up","flexShrink","menuButton","borderRadius","drawerPaper","textAlign","content","PersistentDrawerRight","useTheme","useState","mobileOpen","setMobileOpen","setTypes","province","setProvince","regioni","setRegioni","setRegionValues","setProvinceValues","useEffect","getProvinces","sort","getRegions","foo","toolbar","noWrap","paddingLeft","paddingBottom","float","cursor","Divider","ToggleButtonGroup","exclusive","newFormats","ToggleButton","display","CssBaseline","Drawer","anchor","direction","onClose","paper","ModalProps","keepMounted","App","setTimeout","asMilliseconds","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","URL","process","origin","headers","contentType","get","status","indexOf","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dbf2d7d7.chunk.js","sourcesContent":["Object.defineProperty(exports, \"__esModule\", { value: true });\nconst axios_1 = require(\"axios\");\nconst utils_1 = require(\"./utils\");\nclass DownloadData {\n    constructor(list, url, filter, postDownload) {\n        this.initializing = false;\n        this.initialized = false;\n        this.list = list;\n        this.url = url;\n        this.filter = filter;\n        this.postDownload = postDownload;\n    }\n    async init() {\n        const list = this.list;\n        const url = this.url;\n        const filter = this.filter;\n        if (this.initialized)\n            return;\n        while (this.initializing)\n            await utils_1.delay(1);\n        this.initializing = true;\n        if (this.initialized)\n            return;\n        const data = await axios_1.default.get(url);\n        for (const p of data.data) {\n            if (this.filter(p))\n                list.push(p);\n        }\n        await this.postDownload();\n        this.initialized = true;\n        this.initializing = false;\n    }\n}\nexports.DownloadData = DownloadData;\n//# sourceMappingURL=download-data.js.map","Object.defineProperty(exports, \"__esModule\", { value: true });\nexports.delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nfunction max2Any(N, getNumber) {\n    let max = -Infinity;\n    let maxI = -1;\n    for (let i = 0; i < N.length; i++) {\n        const n = getNumber(N[i]);\n        if (n > max) {\n            max = n;\n            maxI = i;\n        }\n    }\n    return { max, i: maxI, element: N[maxI] };\n}\nexports.max2Any = max2Any;\n//# sourceMappingURL=utils.js.map","Object.defineProperty(exports, \"__esModule\", { value: true });\nconst download_data_1 = require(\"./download-data\");\nconst moment = require(\"moment\");\nexports.Regions = [];\nconst url = \"https://raw.githubusercontent.com/numericnews/numericnews.github.io/master/covid-web/dist/dpc-covid19-ita-regioni.json\";\nconst downloadData = new download_data_1.DownloadData(exports.Regions, url, p => true, async () => {\n    exports.Regions.sort((a, b) => moment(a.data).diff(moment(b.data), 'seconds'));\n});\nasync function init() {\n    await downloadData.init();\n}\nexports.init = init;\n//# sourceMappingURL=regions.js.map","Object.defineProperty(exports, \"__esModule\", { value: true });\nconst provinces_1 = require(\"./provinces\");\nconst regions_1 = require(\"./regions\");\nconst totaleCasi_1 = require(\"./totaleCasi\");\nconst randomcolor = require(\"randomcolor\");\nconst _ = require(\"lodash\");\nconst moment = require(\"moment\");\nconst colorSeed = 1;\nasync function testsPlot(field, selectedRegions, offset) {\n    await provinces_1.init();\n    await regions_1.init();\n    const plots = [];\n    const regionCount = totaleCasi_1.getRegions().length;\n    const italia = selectedRegions.find(r => r.toLowerCase() == \"italia\");\n    if (field == 'denominazione_provincia') {\n        selectedRegions = provinces_1.provincesToRegions(selectedRegions);\n        if (italia)\n            selectedRegions.push(italia);\n    }\n    let colors = [\n        '#1f77b4',\n        '#ff7f0e',\n        '#2ca02c',\n        '#d62728',\n        '#9467bd',\n        '#8c564b',\n        '#e377c2',\n        '#7f7f7f',\n        '#bcbd22',\n        '#17becf'\n    ].concat(selectedRegions.length > 10 ? randomcolor({ count: selectedRegions.length - 10, seed: colorSeed }) : []);\n    let trackOptions = {};\n    let columns = [\n        { label: 'Data', id: 'data', type: 'date' }\n    ];\n    for (let prov of selectedRegions) {\n        const origProvName = _.upperFirst(prov);\n        columns.push({ label: origProvName, id: origProvName, type: 'number' });\n        columns.push({ label: \"percentuale \" + origProvName, id: \"percentuale \" + origProvName, type: 'number' });\n    }\n    plots.push(columns);\n    let firstCasiTestatiMap = new Map();\n    const rows = [];\n    const allPlots = [];\n    const allPosPlots = [];\n    const allPercPlots = [];\n    let i = 0;\n    let ci = 0;\n    for (let prov of selectedRegions) {\n        const origProvName = _.upperFirst(prov);\n        prov = prov.toLowerCase();\n        const plot_ = await totaleCasi_1.plotVelocity(regions_1.Regions, p => totaleCasi_1.filter(\"denominazione_regione\", prov, p), origProvName, 'scatter', p => {\n            if (_.isNumber(p.casi_testati)) {\n                const first = firstCasiTestatiMap.get(p.denominazione_regione);\n                if (!first)\n                    firstCasiTestatiMap.set(p.denominazione_regione, new Date(p.data).getTime());\n                return p.casi_testati;\n            }\n            else {\n                return null;\n            }\n        });\n        const plotT_ = await totaleCasi_1.plotVelocity(regions_1.Regions, p => totaleCasi_1.filter(\"denominazione_regione\", prov, p), origProvName, 'scatter', p => p.tamponi);\n        {\n            const i = plot_.x.findIndex((x, i) => i > 0 && plot_.y[i]);\n            plot_.y = plotT_.y.slice(0, i).concat(plot_.y.slice(i));\n            plot_.y[i] = null;\n        }\n        allPlots.push(plot_);\n        trackOptions[columns[i + 1].label] = { color: colors[ci] };\n        i++;\n        const positivesPlot = await totaleCasi_1.plot(regions_1.Regions, p => totaleCasi_1.filter(\"denominazione_regione\", prov, p), \"nuovi casi \" + origProvName, 'scatter', p => p.nuovi_positivi);\n        const percPlot = {\n            x: plot_.x.slice(),\n            y: positivesPlot.y.slice().map((y, i) => {\n                return y / plot_.y[i] * 100;\n            })\n        };\n        if (italia && prov.toLowerCase() == 'italia') {\n            const firstAll = firstCasiTestatiMap.size == regionCount &&\n                Math.max(...firstCasiTestatiMap.values());\n            const firstAny = Math.min(...firstCasiTestatiMap.values());\n            const i = percPlot.x.findIndex((x, i) => i > 0 && new Date(x).getTime() == firstAny);\n            const j = percPlot.x.findIndex((x, i) => i > 0 && new Date(x).getTime() == firstAll);\n            percPlot.y = percPlot.y.slice(0, i)\n                .concat(_.range(i, j).map(y => null))\n                .concat(percPlot.y.slice(j));\n        }\n        allPercPlots.push(percPlot);\n        trackOptions[columns[i + 1].label] = { color: colors[ci], strokePattern: [2, 2, 2, 2] };\n        i++;\n        ci++;\n    }\n    let X = null;\n    for (let j = 0; j < selectedRegions.length; j++) {\n        if (!X)\n            X = allPlots[j].x;\n        else {\n            if (!_.isEqual(X, allPlots[j].x) ||\n                !_.isEqual(X, allPercPlots[j].x))\n                throw new Error(\"Inconsistent X axes \" + JSON.stringify([columns[j - 1], columns[j]]));\n            X = allPlots[j].x;\n        }\n    }\n    for (let i = 0; i < allPlots[0].x.length; i++) {\n        const x = allPlots[0].x[i];\n        const row = [new Date(x)];\n        for (let j = 0; j < selectedRegions.length; j++) {\n            row.push(allPlots[j].y[i]);\n            row.push(allPercPlots[j].y[i]);\n        }\n        rows.push(row);\n    }\n    return { options: trackOptions, data: [columns].concat(rows), firstCasiTestatiMap };\n}\nexports.testsPlot = testsPlot;\nfunction offsetX(offset, plot) {\n    for (let i = 0; i < plot.x.length; i++) {\n        plot.x[i] = moment(plot.x[i]).add(offset, 'days').toDate();\n    }\n    return plot;\n}\nconst analyze_1 = require(\"./analyze\");\nfunction normalizeY(plot) {\n    const m = analyze_1.max2(plot.y);\n    plot.y = plot.y.map(y => y / m.max);\n}\nfunction filterNegativeValues(plot) {\n    plot.y = plot.y.map(y => y >= 0 ? y : null);\n}\n//# sourceMappingURL=tamponi.js.map","// from https://dev.to/flexdinesh/cache-busting-a-react-app-22lk\n\nimport React from 'react';\nimport packageJson from '../../package.json';\nglobal.appVersion = packageJson.version;\n\n\n// version from response - first param, local version second param\nconst semverGreaterThan = (versionA, versionB) => {\n  const versionsA = versionA.split(/\\./g);\n\n  const versionsB = versionB.split(/\\./g);\n  while (versionsA.length || versionsB.length) {\n    const a = Number(versionsA.shift());\n\n    const b = Number(versionsB.shift());\n    // eslint-disable-next-line no-continue\n    if (a === b) continue;\n    // eslint-disable-next-line no-restricted-globals\n    return a > b || isNaN(b);\n  }\n  return false;\n};\n\nclass CacheBuster extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      isLatestVersion: false,\n      refreshCacheAndReload: () => {\n        console.log('Clearing cache and hard reloading...')\n        const caches = window.caches\n        if (caches) {\n          // Service worker cache should be cleared with caches.delete()\n          caches.keys().then(function(names) {\n            for (let name of names) caches.delete(name);\n          });\n        }\n\n        // delete browser cache and hard reload\n        window.location.reload(true);\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch('/meta.json')\n      .then((response) => response.json())\n      .then((meta) => {\n        const latestVersion = meta.version;\n        const currentVersion = global.appVersion;\n\n        const shouldForceRefresh = semverGreaterThan(latestVersion, currentVersion);\n        if (shouldForceRefresh) {\n          console.log(`We have a new version - ${latestVersion}. Should force refresh`);\n          this.setState({ loading: false, isLatestVersion: false });\n        } else {\n          console.log(`You already have the latest version - ${latestVersion}. No cache refresh needed.`);\n          this.setState({ loading: false, isLatestVersion: true });\n        }\n      });\n  }\n  render() {\n    const { loading, isLatestVersion, refreshCacheAndReload } = this.state;\n    return this.props.children({ loading, isLatestVersion, refreshCacheAndReload });\n  }\n}\n\nexport default CacheBuster;\n","/* eslint-disable no-use-before-define */\n\nimport React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nconst useStyles = makeStyles((theme) => ({\n  input: {\n    '&::placeholder': {\n      color: '#FFF',\n    },\n  },\n}))\nexport default function MultiSelect(props) {\n  const classes = useStyles();\n\n  // disablePortal=true, altrimenti nel mobile non si riesce a selezione le checkbox\n    \n  return (\n    <Autocomplete\n      multiple\n      size=\"small\"\n      disablePortal={true}  \n      options={props.lists}\n      disableCloseOnSelect\n      getOptionLabel={(option) => option}\n      value={props.values}\n      onChange={(event, newValue) => {\n        props.setvalue(newValue,props.type)\n      }}\n      style={{background:'#FFF',padding:20}}\n      renderOption={(option, { selected }) => {\n      return(\n        <React.Fragment>\n        <Checkbox\n          icon={icon}\n          checkedIcon={checkedIcon}\n          style={{ marginRight: 8 }}\n          checked={selected}\n        />\n        {option}\n      </React.Fragment>\n      )\n        \n      \n}}\n      renderInput={(params) => (\n        <TextField \n        InputProps={{\n          classes: { input: classes.input}\n        }}\n        style={{color:'#FFF'}}\n        {...params} variant=\"outlined\" label=\"\" placeholder={props.type} />\n      )}\n      id={props.id+Math.random()}\n    />\n  );\n}\n","import React, { Component } from 'react';\n\nimport { GoogleCharts } from 'google-charts'\n\nimport Dygraph from 'dygraphs'\n\nimport { generalPlot, generalPlotGrowthRate, projectGeneralPlot } from 'covid-web/totaleCasi'\nimport { testsPlot } from 'covid-web/tamponi'\nimport { init as initProvinces } from 'covid-web/provinces'\n\nimport * as _ from 'lodash'\nimport { Grid, Typography, Tabs, Tab, Box } from '@material-ui/core'\n\nimport PropTypes from 'prop-types';\nimport { smallYBounds, max2, average } from 'covid-web/analyze';\nimport * as moment from 'moment'\nimport {dateString_} from 'dygraphs/src/dygraph-utils'\n\nconst globalState = {}\n\n\nconst exponentialGrowthComment = (\n    <Typography component=\"p\">\n      Dettagli sui calcoli: il growth rate in data t e' stimato usando la formula: <br></br> r(t) = (I(t)-I(t-1)) / (I(t-1)-I(t-2)) = v(t) / v(t-1)\n      <br></br>\n      dove I(t) e' il numero totale dei casi al tempo t, v(t) e' la velocita' al tempo t.\n      Per una motivazione dell'uso di tale formula, vedi <a href=\"http://katolaz.net/covid-2019/growth.html\">Epidemic 101</a>\n      <br></br>\n      Da tale stima, la formula per il calcolo del numero di casi al tempo t e': <img src=\"/eq_growth.svg\" style={{ height: \"50%\", width: \"auto\" }} alt=\"I(t)=r**t*I(0)\"></img>, dove I(0) e' il numero di infetti iniziali. \n      <br></br> \n      Nota: questa formula e' una forte semplificazione del reale fenomeno dell'epidemia corona virus,\n      ma essendo l'epidemia di carattere esponenziale, rende comunque una idea di come l'epidemia potrebbe\n      evolvere senza misure di contenimento, di lock-down e vaccinazione.\n      <br></br>\n      Gli scienziati stanno ancora studiando le dinamiche dell'epidemia Coronavirus. Tuttavia, un growth rate maggiore di uno implica un altissimo valore di crescita. Per approfondire sull'exponential growth rate vedi\n      {' '}<a href=\"http://katolaz.net/covid-2019/growth.html\">Epidemic 101</a>, \n      {' '}<a href=\"https://www.youtube.com/watch?v=Kas0tIxDvrg&t=81s\">3Blue1Brown Youtube</a>, \n      {' '}<a href=\"https://en.wikipedia.org/wiki/Basic_reproduction_number\">R0 (wikipedia)</a>, \n      {' '}<a href=\"https://www.ncbi.nlm.nih.gov/pubmed/32007643\">Zhao, Lin, et al.</a>\n      {' '}(\"The early outbreak data largely follows the exponential growth. [We estimated a] mean R0 from 2.24 to 3.58\").\n      <br></br>\n      Ci sono formule e modelli molto piu' rifiniti, precisi e validi, che tengono conto\n      delle diverse possibili fasi ed evoluzioni della malattia nel singolo individuo,\n      tuttavia la dinamica di base dell'exponential growth e' la stessa.\n    </Typography>\n)\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={!value || value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n      style={{height:'100%'}}\n    >\n      {value === index && <Box style={{height:'50%'}} p={3}>{children}</Box>}\n    </Typography>\n\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\n// returns only the portion of the plot with dates >= startDate.\n// data: plot in GViZ format \nfunction filterByStartDate(startDate: Date, data: any[][]) {\n    const startIdx = data.findIndex((r,i) => i > 0 && r[0].getTime() >= startDate.getTime())\n    if (startIdx >= 0)\n        return [data[0]].concat(data.slice(startIdx))\n    else\n        return data\n}\n\n\nclass PlotComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date().toLocaleString(),\n      projPlotStart: null,\n      activeStep: 0,\n      value: 1,\n      open: false,\n      startDate: moment().subtract(1, 'month').toDate()\n    }\n  }\n\n  getSelectedItems() {\n      \n      if (this.props.types == \"Nazione\")\n          return [\"Italia\"]\n\n      if (this.props.field === \"denominazione_regione\")\n          return this.props.regionValues\n      else \n          return this.props.provinceValues\n\n  }\n\n  componentWillMount() {\n    GoogleCharts.load(() => {\n      this._draw(this.props.field, this.getSelectedItems())\n    });\n  }\n\n  onOrientationChange(ev) {\n\n    // After orientationchange, add a one-time resize event: https://stackoverflow.com/a/49383279/7092558\n    var afterOrientationChange = () => {\n\n        this.setState({innerWidth: window.innerWidth})\n\n        // Remove the resize event listener after it has executed\n        window.removeEventListener('resize', afterOrientationChange);\n    };\n    window.addEventListener('resize', afterOrientationChange);\n  }\n\n  componentDidMount() {\n      const orHandler = this.onOrientationChange.bind(this)\n      window.addEventListener(\"orientationchange\", orHandler)\n      this.setState({ onOrientationChange: orHandler })\n  }\n\n  componentWillUnmount() {\n      if (this.state.onOrientationChange)\n          window.removeEventListener(\"orientationchange\", this.state.onOrientationChange)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n\n    if (prevState.startDate != this.state.startDate ||\n        prevProps.types !== this.props.types ||\n        prevProps.field !== this.props.field ||\n      !_.isEqual(prevProps.regionValues, this.props.regionValues) ||\n      !_.isEqual(prevProps.provinceValues, this.props.provinceValues)\n    ) {\n\n      const selectedItems = this.getSelectedItems()\n      if (!selectedItems.length) return;\n\n      this._draw(this.props.field, selectedItems)\n\n    } else if (prevState.innerWidth != this.state.innerWidth) {\n      // resize all\n      for (const field of Object.keys(globalState)) {\n        const value = globalState[field]\n        if (_.isObject(value) && 'resize' in value && _.isFunction(value.resize)) {\n          value.resize()\n        }\n      }\n    }\n\n  }\n\n  // Darken a color\n  darkenColor(colorStr) {\n    // Defined in dygraph-utils.js\n    var color = Dygraph.toRGB_(colorStr);\n    color.r = Math.floor((255 + color.r) / 2);\n    color.g = Math.floor((255 + color.g) / 2);\n    color.b = Math.floor((255 + color.b) / 2);\n    return 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';\n  }\n\n  // This function draws bars for a single series. See\n  // multiColumnBarPlotter below for a plotter which can draw multi-series\n  // bar charts.\n  barChartPlotter(e) {\n    var ctx = e.drawingContext;\n    var points = e.points;\n    var y_bottom = e.dygraph.toDomYCoord(0);\n\n    ctx.fillStyle = this.darkenColor(e.color);\n\n    // Find the minimum separation between x-values.\n    // This determines the bar width.\n    var min_sep = Infinity;\n    for (var i = 1; i < points.length; i++) {\n      var sep = points[i].canvasx - points[i - 1].canvasx;\n      if (sep < min_sep) min_sep = sep;\n    }\n    var bar_width = Math.floor(2.0 / 3 * min_sep);\n\n    // Do the actual plotting.\n    for (var j = 0; j < points.length; j++) {\n      var p = points[j];\n      var center_x = p.canvasx;\n\n      ctx.fillRect(center_x - bar_width / 2, p.canvasy,\n        bar_width, y_bottom - p.canvasy);\n\n      ctx.strokeRect(center_x - bar_width / 2, p.canvasy,\n        bar_width, y_bottom - p.canvasy);\n    }\n  }\n\n\n  legendFormatter(data) {\n    const g = data.dygraph\n    const labels = g ? g.getLabels() : []\n    if (data.x === null) {\n      // This happens when there's no selection and {legend: 'always'} is set.\n      return data.series\n                  .map(series => \n                          '<div>' + series.dashHTML + '</div>' +\n                          '<div>' + series.labelHTML + '</div>'\n                        )\n\n    }\n    const nowZeroSec = new Date(); nowZeroSec.setSeconds(0); nowZeroSec.setMilliseconds(0);\n    var html = '<div>' + ( \n            this.getLabels()[0] + ': ' + (data.xHTML || dateString_(nowZeroSec))\n    )  + '</div>' ;\n    data.series.forEach((series, i) => {\n      if (!series.isVisible) return;\n      var labeledData = series.labelHTML  + (series.yHTML ? ': ' + series.yHTML + \"&nbsp;\" : ': ------');\n      if (series.isHighlighted) {\n        labeledData = '<b>' + labeledData + '</b>';\n      }\n      var strokePattern = i>0 && g ? g.getOption('strokePattern', labels[i+1]) : [];\n      const border = \n            (!strokePattern || strokePattern.length <= 1 ? \"solid \" : \"dashed \") +\n           (series.color || \"white\") +\n           \" 3px\"\n      html += `<div style=\"border-bottom: ${border}\">` +labeledData+ '</div>';\n    });\n\n    return html;\n  }\n\n  async drawGrowthRate(field, selectedItems, render = true) {\n\n\n    await initProvinces();\n\n    const grPlot = await generalPlotGrowthRate(field, selectedItems)\n    grPlot.data = filterByStartDate(this.state.startDate, grPlot.data)\n\n    globalState.drawGrowthRatePlot = grPlot\n\n    const yBounds = smallYBounds(grPlot.data.slice(1), 5)\n\n    const lastDate = grPlot.data[grPlot.data.length - 1][0] // convert the last date to string\n    const lastGrowthRates = grPlot.data[0].map((column, i) => {\n      return [column.label]\n        .concat([grPlot.data[grPlot.data.length - 1][i]]) // take the growth rate of column i\n    }).slice(1, grPlot.data[0].length - 1) // note: length-1 is for removing \"crescita zero\" column\n    this.setState({\n      lastGrowthRates: {\n        data: lastGrowthRates,\n        date: lastDate\n      }\n    })\n\n    grPlot.gviz = GoogleCharts.api.visualization.arrayToDataTable(grPlot.data);\n\n    const options = {\n      legendFormatter: this.legendFormatter,\n      // labelsSeparateLines: true,\n      strokeWidth: 3,\n      legend: 'always',\n      labelsDiv: 'growthRateLegendDiv',\n      colorValue: 1,\n      digitsAfterDecimal: 4,\n      series: grPlot.options,\n      valueRange: yBounds\n    }\n\n    if (render) {\n      globalState.drawGrowthRateGraph = new Dygraph(\n        document.getElementById(\"growthRatePlotDiv\"),\n        grPlot.gviz,\n        options\n      )\n      globalState.drawGrowthRateGraph.resize()\n    }\n\n\n  }\n\n  annotationOnHighlight(g, ev, x, points, row, seriesName) {\n    const ann = []\n\n    for (const p of points) {\n      const ystr = '' + p.yval\n      const datestr = moment(x).format(\"DD MMM\")\n      const maxlength = Math.max(ystr.length, datestr.length)\n      const text = `${ystr}<br>${datestr}`\n      const length = maxlength / 1.5\n      const lines = 2\n      ann.push({\n        series: p.name,\n        xval: x,\n        width: 18 * length,\n        height: 23 * lines,\n        tickHeight: 4,\n        html: text\n      })\n    }\n\n    g.setAnnotations(ann)\n  }\n\n  annotationOnPointClick(g, ev, point) {\n    return this.annotationOnHighlight(g, ev, point.xval, [point])\n  }\n\n  async drawChart(field, selectedItems, render = true) {\n\n    function onlyVelocity(data: any[][]) {\n    \n        return data.map((r,i) =>\n            r.filter((c,i) => i % 2 == 0))\n\n    }\n\n    function onlyTotaleCasi(data: any[][]) {\n    \n        return data.map((r,i) =>\n                    r.filter((c,i) => i == 0 || i % 2 == 1))\n\n    }\n\n    await initProvinces(); // C: no sense. A: just common sense :)\n\n    const plot = await generalPlot(field, selectedItems)\n    plot.data = filterByStartDate(this.state.startDate, plot.data)\n\n    globalState.drawChartPlot = plot\n\n    const plotTotale = Object.assign({}, plot)\n    plotTotale.data = onlyTotaleCasi(plot.data)\n    plotTotale.gviz = GoogleCharts.api.visualization.arrayToDataTable(plotTotale.data);\n    const totaleOptions = {\n      legendFormatter: this.legendFormatter,\n      // labelsSeparateLines: true,\n      strokeWidth: 3,\n      legend: 'always',\n      labelsDiv: 'totaleLegendDiv',\n      colorValue: 1,\n      series: Object.assign({}, plotTotale.options),\n    }\n\n    const plotVel = Object.assign({}, plot)\n    plotVel.data = onlyVelocity(plot.data)\n    plotVel.gviz = GoogleCharts.api.visualization.arrayToDataTable(plotVel.data);\n    const velOptions = {\n      legendFormatter: this.legendFormatter,\n      // labelsSeparateLines: true,\n      strokeWidth: 3,\n      legend: 'always',\n      labelsDiv: 'velLegendDiv',\n      colorValue: 1,\n      series: Object.assign({}, plotVel.options),\n    }\n\n    if (render) {\n      if (globalState.drawChartGraphVel)\n        globalState.drawChartGraphVel.destroy()\n\n      globalState.drawChartGraphVel = new Dygraph(\n        document.getElementById(\"velPlotDiv\"),\n        plotVel.gviz,\n        velOptions\n      )\n      globalState.drawChartGraphVel.ready(()=>{\n        globalState.drawChartGraphVel.resize()\n      })\n\n      if (globalState.drawChartGraphTotale)\n        globalState.drawChartGraphTotale.destroy()\n\n      globalState.drawChartGraphTotale = new Dygraph(\n        document.getElementById(\"totalePlotDiv\"),\n        plotTotale.gviz,\n        totaleOptions\n      )\n      globalState.drawChartGraphTotale.ready(()=>{\n        globalState.drawChartGraphTotale.resize()\n      })\n\n        /* does not work when zooming\n      const g = globalState.drawChartGraph\n      g.ready(() => {\n        g.updateOptions({\n          pointClickRadius: 50,\n          pointClickCallback: this.annotationOnPointClick.bind(this, g)\n        })\n      })\n      */\n    }\n\n  }\n\n  /*\nasync drawR0(field, selectedItems, render = true) {\n\n  await initProvinces();\n\n  const plot = await plotR0(field, selectedItems)\n  globalState.drawR0Plot = plot\n\n  plot.gviz = GoogleCharts.api.visualization.arrayToDataTable(plot.data);\n\n  const options = {\n    legendFormatter: this.legendFormatter,\n    // labelsSeparateLines: true,\n    strokeWidth: 3,\n    legend: 'always',\n    labelsDiv: 'r0LegendDiv',\n    colorValue: 1,\n    series: plot.options\n  }\n\n  if (render) {\n    globalState.drawR0Graph = new Dygraph(\n      document.getElementById(\"r0PlotDiv\"),\n      plot.gviz,\n      options\n    )\n  }\n\n}\n*/\n\n  async calculateProjectionChart(field, selectedItems, startDate = null) {\n\n    await initProvinces()\n\n    const plot = await projectGeneralPlot(field, selectedItems, startDate)\n\n    this.setState({\n      projPlotStart: {\n        gr: plot.gr,\n        date: plot.startDate,\n        series: plot.series \n      }\n    })\n\n    plot.gviz = GoogleCharts.api.visualization.arrayToDataTable(plot.data);\n\n    return {plot, safeMax: plot.safeMax}\n  }\n\n  /* Important: this function must be AFTER drawChart() and drawGrowthRateChart() */\n  async drawProjectionChart(field, selectedItems, startDate = null) {\n\n    const {plot, safeMax} = await this.calculateProjectionChart(field, selectedItems, startDate)\n    globalState.projectionPlot = plot\n\n    const options = {\n      legendFormatter: this.legendFormatter,\n      // labelsSeparateLines: true,\n      strokeWidth: 3,\n      legend: 'always',\n      labelsDiv: 'projLegendDiv',\n      colorValue: 1,\n      series: plot.options,\n      valueRange: [0, safeMax],\n    }\n\n    if (globalState.drawProjectionChartGraph)\n      globalState.drawProjectionChartGraph.destroy()\n\n    globalState.drawProjectionChartGraph = new Dygraph(\n      document.getElementById(\"projPlotDiv\"),\n      plot.gviz,\n      options\n    )\n    globalState.drawProjectionChartGraph.resize()\n\n    const g = globalState.drawProjectionChartGraph\n    g.ready(() => {\n          g.updateOptions({ \n              pointClickRadius: 50,\n              pointClickCallback: async (ev, point) => {\n                const i = point.idx\n                const data = globalState.projectionPlot.data\n                let startDate = data[i+1][0]\n                if (startDate.getTime() > globalState.projectionPlot.maxDate.getTime()) {\n                    startDate = globalState.projectionPlot.maxDate\n                }\n                const {plot, safeMax} = await this.calculateProjectionChart(field, selectedItems, startDate)\n                g.updateOptions({ \n                    file: plot.gviz,\n                    valueRange: [0, safeMax]\n                })\n              }\n          })\n    })\n\n\n  }\n\n  async drawTamponiChart(field, selectedItems) {\n\n    //await initProvinces()\n    //await initRegions() done internally by testsPlot()\n\n    const plotT = await testsPlot(field, selectedItems, 0)\n    plotT.data = filterByStartDate(this.state.startDate, plotT.data)\n\n    const plotP = _.cloneDeep(plotT)\n\n    this.setState({ firstCasiTestati: plotT.firstCasiTestatiMap })\n\n    for (let i = 1; i < plotT.data.length; i++) {\n      for (let j = 1; 2 * j < plotT.data[i].length; j++) {\n        plotT.data[i][2 * j] = null\n        plotP.data[i][2 * (j - 1) + 1] = null\n      }\n    }\n\n    const yPBounds = smallYBounds(plotP.data.slice(1), 1)\n\n    plotT.gviz = GoogleCharts.api.visualization.arrayToDataTable(plotT.data);\n\n    plotP.gviz = GoogleCharts.api.visualization.arrayToDataTable(plotP.data);\n\n    const optionsT = {\n      legendFormatter: this.legendFormatter,\n      // labelsSeparateLines: true,\n      strokeWidth: 3,\n      legend: 'always',\n      labelsDiv: 'tampTLegendDiv',\n      colorValue: 1,\n      series: plotT.options,\n    }\n\n    globalState.drawTampTChartGraph = new Dygraph(\n      document.getElementById(\"tampTPlotDiv\"),\n      plotT.gviz,\n      optionsT\n    )\n    globalState.drawTampTChartGraph.resize()\n\n    const optionsP = _.clone(optionsT)\n    optionsP.labelsDiv = 'tampPLegendDiv'\n    optionsP.series = _.clone(optionsT.series)\n    optionsP.valueRange = [0, Math.min(100, yPBounds[1])]\n\n    globalState.drawTampPChartGraph = new Dygraph(\n      document.getElementById(\"tampPPlotDiv\"),\n      plotP.gviz,\n      optionsP\n    )\n    globalState.drawTampPChartGraph.resize()\n\n  }\n\n  async  _draw(field, selectedItems) {\n    switch (this.state.value) {\n      case 1:\n        await this.drawChart(field, selectedItems);\n        break;\n\n      case 2:\n        await this.drawTamponiChart(field, selectedItems)\n        break\n\n      case 3:\n        await this.drawGrowthRate(field, selectedItems);\n        break;\n\n      case 4:\n        await this.drawProjectionChart(field, selectedItems)\n        break;\n\n      default:\n        break\n    }\n  }\n\n  /* does not work with pinch-zoom\n  zoomVelocity() {\n\n    if (!globalState.drawChartGraph || !globalState.drawChartPlot)\n        return\n\n    const recentDateWindow = [moment().subtract(30, 'days').toDate(), new Date()]\n\n    const velocityPlots = globalState.drawChartPlot.data\n        .map((r,i) => i == 0 ? \n                r : \n                r.map((c,i) =>\n                    i == 0 || i % 2 == 0 ? \n                        c : \n                        'not-vel')\n                 .filter(c => c != 'not-vel'))\n        .filter((r,i) => i == 0 || r[0].getTime() >= recentDateWindow[0].getTime())\n                \n\n    const yBounds = smallYBounds(velocityPlots.slice(1), 5)\n\n    console.log(yBounds)\n\n    globalState.drawChartGraph.updateOptions({\n        valueRange: [0, yBounds[1]],\n        dateWindow: recentDateWindow\n    })\n  }*/\n\n  handleChange(event, value) {\n    if (value == 0) {\n        this.props.handleDrawerToggle()\n        return\n    }\n    const { field } = this.props;\n    const selectedItems = this.getSelectedItems(); \n    this.setState({ value: value }, () => {\n      this._draw(field, selectedItems)\n    })\n  }\n\n  getLabel() {\n    const { value } = this.state;\n    switch (value) {\n      default: return 'Approfondimento'\n    }\n  }\n\n  getContent(key: string) {\n\n    const {  \n        lastGrowthRates, value, projPlotStart, firstCasiTestati, startDate\n    } = this.state;\n\n    const lastMonth = moment().subtract(1, 'month').toDate();\n\n    const clickToChangeStartDate = (\n        !startDate || startDate.getTime() > 0 ?\n         (<Typography component=\"p\">\n              <button onClick={() => this.setState({ startDate: new Date(0) }) }\n              >Clicca per vedere anche i dati prima del {startDate.toLocaleString()}</button>\n        </Typography>) :\n        (<Typography component=\"p\">\n              <button onClick={() => this.setState({ startDate: lastMonth }) }\n              >Clicca per vedere i dati solo a partire dal {lastMonth.toLocaleString()}</button>\n        </Typography>)\n    );\n\n    const lastGrowthRate = lastGrowthRates\n\n    const firstCasiTestatiDate = firstCasiTestati && new Date(Math.max(...firstCasiTestati.values()))\n    const firstCasiTestatiDateStr = firstCasiTestatiDate ? firstCasiTestatiDate.toLocaleString() : '[non disponibile]'\n\n    const tamponiExplanation = (\n      <div className=\"explanation\">\n        <Typography component=\"p\">\n          <br></br>\n          In questi due grafi viene rappresentata la percentuale di tamponi risultati positivi\n          e il numero totale di tamponi effettuati in un dato giorno.\n          <br></br>\n          Facendo un esempio estremo, se il numero di tamponi e' basso, 10, e il numero di casi in quel giorno e' 10 (e la percentuale e' 100%), e' comunque possibile che ci siano, in realta', molti piu' casi, ad esempio, 100. Semplicemente, gli altri 90 casi non sono stati registrati perche' non sono stati fatti i tamponi.\n          Quindi, possiamo dire che piu' il numero di tamponi e' alto e piu' la percentuale e' bassa, piu' il numero totale dei casi e i numeri derivati da esso (velocita', growth rate), mostrati negli altri grafi, sono indicativi.\n          <br></br>\n          {clickToChangeStartDate}\n          <br></br>\n          Dettagli: a partire da giorno {firstCasiTestatiDateStr}, il numero dei tamponi e' sostituito dal numero \n          di \"casi testati\". Questo perche' i tamponi vengono fatti piu' volte ad una stessa persona. \n          \"Casi testati\", invece, non conta i tamponi duplicati, quindi una persona viene conteggiata una volta sola.\n          <br></br>\n          Prima di giorno {firstCasiTestatiDateStr}, questo parametro non era disponibile. Per piu' informazioni,\n          vedi  <a href=\"https://www.youtrend.it/2020/03/25/coronavirus-il-rebus-dei-tamponi-multipli/\">Lorenzo Ruffino</a>.\n          <br></br>\n          Nota: non e' disponibile il numero di tamponi per provincia, ma solo per regione.\n          <br></br>\n          Nota: nei primi giorni di cambio da \"tamponi\" a \"casi testati\", ci sono state delle irregolarita' nei dati di Lombardia, Lazio e Campania. Piu' precisamente, giorno 20 e 21 aprile, vedi <a href=\"https://github.com/pcm-dpc/COVID-19/blob/master/note/dpc-covid19-ita-note-it.csv\">Note DPC</a>.\n         </Typography>\n      </div>\n    )\n\n    const contentBody = () => {\n        switch (value) {\n               \n          case 1:\n                return (\n              <div className=\"explanation\">\n                <br></br>\n                  {key == \"totalePlotDiv\" ? \n                    <Typography component=\"p\">\n                      Totale casi: sono tutte le persone che sono state certificate essere infette da coronavirus. Questo numero e' uguale alla somma \"persone attualmente positive\" + \"persone guarite\" + \"persone decedute\"\n                    </Typography> :\n                    <Typography component=\"p\">\n                      Velocita': e' il numero dei nuovi casi. Se, ad esempio, oggi la velocita' e' 10, vuol dire ci sono stati 10 casi in piu' rispetto a ieri. Lo stesso vale per gli altri giorni: se giorno 15 Marzo la velocita' e' 7, vuol dire che rispetto al giorno precedente ci sono stati 7 casi in piu'.\n                    </Typography>\n                  }\n                <br></br>\n                {clickToChangeStartDate}\n              </div>\n            )\n\n          case 2: return tamponiExplanation;\n\n          case 3: return (\n            <div className=\"explanation\">\n              <Typography component=\"p\">\n                In data {lastGrowthRate?.date ? lastGrowthRate?.date.toLocaleString() : '[non-disponibile]'}, i growth rate sono:\n                          <br></br>\n                <br></br>\n                {\n                  lastGrowthRate?.data ?\n                    lastGrowthRate.data.map((d, i) =>\n                      <span key={i}>{d\n                        .map(n => _.isNumber(n) ? n.toFixed(4) : n)\n                        .join(' ')\n                      }\n                        <br></br></span>) :\n                    '[non disponibile]'\n                }\n              </Typography>\n\n              <br></br>\n              <Typography component=\"p\">\n                Growth rate: rapporto tra la velocita' di un giorno e quella del giorno precedente. E' una quantita' importante perche' e' una stima della crescita della velocita'. Se il growth rate e' maggiore di 1, allora la velocita' sta' crescendo. Se e' minore, sta' diminuendo. L'epidemia finisce solo se la velocita' scende e rimane a zero.\n                </Typography>\n              <br></br>\n              {clickToChangeStartDate}\n              <br></br>\n              <Typography component=\"p\">\n                La crescita del numero di casi in un'epidemia come il Coronavirus e' esponenziale.\n                In una crescita esponenziale anche valori poco piu' alti (growth rate > 1) implicano un'altissima crescita.\n                Ad esempio, se ci sono 100 infetti, con growth rate 1.22, solo dopo 30 giorni ci saranno 39000 infetti.\n              </Typography>\n              <br></br>\n              {exponentialGrowthComment}\n            </div>\n          );\n\n          case 4: return (\n              <div className=\"explanation\">\n                <Typography component=\"p\">\n                  In questo grafo, viene usato il growth rate per mostrare <b>a grandi linee</b>{' '}\n                  come procederebbe l'epidemia se non venissero fatte delle misure di contenimento e lock-down.\n                  Senza misure di prevenzione, l'andamento dei nuovi casi sarebbe esponenziale.\n                </Typography>\n                {projPlotStart ? (\n                    <Typography component=\"p\">\n                        L'andamento ipotetico graficato (linee tratteggiate) e' a partire da giorno {projPlotStart.date.toLocaleString()},\n                        dove i growth rate erano {projPlotStart.gr.map(r=>r.toFixed(3)).join(', ')} in {projPlotStart.series.join(', ')}.\n                        <br></br>\n                        Puoi cliccare su un punto del grafo per cambiare il giorno dell'inizio della proiezione. La proiezione verra' ricalcolata a partire da quel punto, usando il growth rate di quel giorno.\n                         <br></br>\n                         Nota: la proiezione inizia giorno {projPlotStart.date.toLocaleString()}. Il numero di infetti iniziale <i>I(0)</i> in quel giorno e' scelto come il numero di \"totale positivi\", ovvero il numero di persone infette vive e non ancora guarite. Nel grafo si puo' notare un balzo in basso, infatti, \"totale positivi\" {'<='} \"totale casi\".                         <br></br>\n                         Infine, se il growth rate e' minore di 1, la proiezione non ha piu' senso e verra' graficata una linea costante.\n                    </Typography>\n                    ) :\n                    ''}\n              {exponentialGrowthComment}\n              </div>\n            )\n\n          default: return <div />\n        }\n    }\n\n    const isFinalContent = !key || key == \"velPlotDiv\"\n\n    return (\n        <>\n            {contentBody()}\n            {isFinalContent ? \n                (<div style={{\"font-size\": \"smaller\"}}>\n                <br></br>\n                I dati sono forniti dalla <a href=\"https://github.com/pcm-dpc/COVID-19\">Protezione Civile</a>.\n                Il codice sorgente dei plot e' disponibile su <a href=\"https://github.com/numericnews/numericnews.github.io/tree/master/covid-web\">github</a>.\n                <br></br>\n                <a href=\"https://www.linkedin.com/in/lopumo/\">Andrea Lo Pumo</a>, <a href=\"https://www.linkedin.com/in/claudiomusumeci/\">Claudio F. Musumeci</a>.  <a href=\"mailto:numeric-news-authors@googlegroups.com\">Contattaci</a>.\n                </div>) :\n                <></>\n            }\n        </>\n    )\n  }\n\n\n  handleClose() {\n    this.setState({ open: false });\n  }\n\n  render() {\n\n    const maxWidth = window.innerWidth > window.innerHeight ?\n                        (window.innerWidth - 20/100*window.innerWidth) + 'px' :\n                        (window.innerWidth - 10/100*window.innerWidth) + 'px'\n/*\n    const maxHeight = window.innerHeight > window.innerWidth ?\n                        (window.innerHeight - 10/100*window.innerHeight) + 'px' :\n                        (window.innerHeight - 5/100*window.innerHeight) + 'px'\n*/\n    const { value } = this.state;\n\n    const provRegs = this.props.types == \"Regione\" ? 'regioni' : 'province'\n\n    const doubleClickZoomHint = (\n        <div style={{left:'60px', top:'10px', position: 'absolute', \"font-size\": 'small'}}>\n                Due dita per zoomare. Doppio click per resettare.\n        </div>\n    )\n\n    const getTabBar = () => document.getElementById('tabBar')\n\n    return (\n\n\n      <React.Fragment>\n        <Tabs id=\"tabBar\"\n            onChange={this.handleChange.bind(this)} aria-label=\"ploty tabs\" \n                  variant=\"fullWidth\"\n                  scrollButtons=\"auto\"\n                  className='generalTabs'\n                  value={this.state.value}\n      >\n          <Tab label={\"Altre \"+provRegs}/>\n          <Tab label=\"Totale casi\" />\n          <Tab label=\"Tamponi\" />\n          <Tab label=\"Growth Rate\" />\n          <Tab label=\"Exp Growth Rate\" />\n        </Tabs>\n        <TabPanel label={\"Altre \"+provRegs} value={value} index={0} >\n        empty\n        </TabPanel>\n        <TabPanel label={\"Totale casi\"} value={value} index={1} >\n          <div id=\"totaleCasi\" style={{height:'100%', top: getTabBar()?.clientHeight, position: 'relative'}}>\n          <Grid container style={{height:(window.innerHeight*75/100)+'px'\n          }}>\n            <Grid item xs={12} md={12} className=\"containerLegend\">\n              <div id='totaleLegendDiv'></div>\n              </Grid>\n\n              <Grid item xs={12} md={12} style={{\n                  position: 'relative',\n                  width: '90%',\n                  height: '100%',\n                  maxWidth,\n                 }}>\n                {doubleClickZoomHint}\n                <div id='totalePlotDiv' style={{ width: '100%',height:'100%' }}></div>\n              </Grid>\n              <Grid item xs={12}>\n           {this.getContent(\"totalePlotDiv\")}       \n           </Grid>\n            <Grid item xs={12} md={12} className=\"containerLegend\">\n              <div id='velLegendDiv'></div>\n              </Grid>\n\n              <Grid item xs={12} md={12} style={{\n                  position: 'relative',\n                  width: '90%',\n                  height: '100%',\n                  maxWidth,\n                 }}>\n                {doubleClickZoomHint}\n                <div id='velPlotDiv' style={{ width: '100%',height:'100%' }}></div>\n              </Grid>\n              <Grid item xs={12}>\n           {this.getContent(\"velPlotDiv\")}       \n           </Grid>\n\n            </Grid>\n          </div>\n        </TabPanel>\n        <TabPanel label={\"Tamponi\"} value={value} index={2}>\n          <div style={{top: getTabBar()?.clientHeight, position: 'relative'}}>\n            <Grid container style={{ height: window.innerHeight * 75 / 100 + 'px' }}>\n              <Grid item xs={12} md={12} className=\"containerLegend\">\n                <div id='tampPLegendDiv'></div>\n              </Grid>\n              <Grid item xs={12} md={12} style={{ position: 'relative', width: '100%', height: '100%', maxWidth }}>\n                {doubleClickZoomHint}\n                <div id='tampPPlotDiv' style={{ width: '100%', height: '100%' }}></div>\n              </Grid>\n\n\n\n              <Grid item xs={12} md={12} style={{ position: 'relative', width: '100%', height: '100%', maxWidth }}>\n                {doubleClickZoomHint}\n                <div id='tampTPlotDiv' style={{ width: '100%', height: '100%' }}></div>\n              </Grid>\n              <Grid item xs={12} md={12} className=\"containerLegend\">\n                <div id='tampTLegendDiv'></div>\n              </Grid>\n\n              <Grid item xs={12}>\n                {this.getContent()}\n              </Grid>\n            </Grid>\n          </div>\n\n        </TabPanel>\n\n        <TabPanel label={\"Growth Rate\"} value={value} index={3}>\n          <div style={{top: getTabBar()?.clientHeight, position: 'relative'}}>\n          <Grid container style={{height:window.innerHeight*75/100+'px'}}>\n               <Grid item xs={12} md={12} className=\"containerLegend\">\n                  <div id='growthRateLegendDiv'></div>\n               </Grid>\n               <Grid item xs={12} md={12} style={{ position: 'relative', width: '100%',height:'100%',maxWidth}}>\n                  {doubleClickZoomHint}\n                  <div id='growthRatePlotDiv' style={{ width: '100%',height:'100%'  }}></div>\n               </Grid>\n               <Grid item xs={12}>\n                 {this.getContent()}       \n               </Grid>\n            </Grid>\n          </div>\n        </TabPanel>\n\n        <TabPanel label={\"Proiezione\"} value={value} index={4}>\n          <div style={{top: getTabBar()?.clientHeight, position: 'relative'}}>\n              <Grid container style={{height:window.innerHeight*75/100+'px'}}>\n                  <Grid item xs={12} md={12} className=\"containerLegend\">\n                      <div id='projLegendDiv'></div>\n                  </Grid>\n                  <Grid item xs={12} md={12} style={{ position: 'relative', width: '100%',height:'100%',maxWidth}}>\n                      {doubleClickZoomHint}\n                      <div id='projPlotDiv' style={{ width: '100%',height:'100%'  }}></div>\n                  </Grid>\n                  <Grid item xs={12}>\n                      {this.getContent()}       \n                  </Grid>\n              </Grid>\n          </div>\n\n        </TabPanel>\n      </React.Fragment>\n    );\n  }\n}\nexport default PlotComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport { Drawer, Grid } from '@material-ui/core';\nimport Hidden from '@material-ui/core/Hidden';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport IconButton from '@material-ui/core/IconButton';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MailIcon from '@material-ui/icons/Mail';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport MultiSelect from './multiselect'\nimport { init as initProvinces } from 'covid-web/provinces'\nimport Ploty from './ploty'\nimport { getProvinces, getRegions } from 'covid-web/totaleCasi';\n\nconst drawerWidth = 300;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  menuButton: {\n    border:'solid 1px #FFF',\n    borderRadius:'15px',\n    fontSize:'10px',\n    // marginRight: theme.spacing(2),\n    padding:'3px',\n    fontSize:'1rem'\n  },\n  // necessary for content to be below app bar\n  drawerPaper: {\n    // width: drawerWidth,\n    background: '#2c2e35',\n    color: '#FFF',\n    textAlign: 'center'\n  },\n  content: {\n    // flexGrow: 1,\n    // padding: theme.spacing(3),\n  },\n}));\n\nexport default function PersistentDrawerRight(props) {\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const [types, setTypes] = React.useState('Provincia');\n  const [province, setProvince] = React.useState([])\n  const [regioni, setRegioni] = React.useState([])\n  const [regionValues, setRegionValues] = React.useState([\"Lombardia\", \"Veneto\"])\n  const [provinceValues, setProvinceValues] = React.useState([\"Bergamo\", \"Milano\", \"Venezia\"])\n  function setSelectedProvince(newValue) {\n    setProvinceValues(newValue)\n  }\n  function setSelectedRegion(newValue) {\n    setRegionValues(newValue)\n  }\n  React.useEffect(() => {\n\n    const foo = async () => {\n      await initProvinces()\n\n      setProvince(getProvinces().sort())\n      setRegioni(getRegions().sort())\n    }\n\n    foo()\n\n  }, [])\n\n  const handleType = (event, newFormats) => {\n    setTypes(newFormats);\n  };\n\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} >\n        <Grid container style={{ position: 'relative', top: '15px' }}>\n          <Grid item xs={6}>\n            <Typography variant=\"h6\" noWrap style={{ paddingLeft: 10, paddingBottom: 20 }}>\n              Filtra\n           </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <ArrowBackIosIcon style={{ float: 'right', cursor: 'pointer' }}\n              onClick={handleDrawerToggle}\n\n            />\n\n          </Grid>\n\n        </Grid>\n\n\n      </div>\n      <Divider />\n      <ToggleButtonGroup exclusive value={types} onChange={handleType} aria-label=\"aree_buttons\">\n        <ToggleButton value=\"Nazione\" aria-label=\"bold\">\n          Nazione\n        </ToggleButton>\n        <ToggleButton value=\"Regione\" aria-label=\"bold\">\n          Regioni\n            </ToggleButton>\n        <ToggleButton value=\"Province\" aria-label=\"bold\">\n          Province\n            </ToggleButton>\n      </ToggleButtonGroup>\n      <Divider />\n      <div style={{ display: types === 'Regione' ? 'block' : 'none' }}>\n        <MultiSelect id=\"regione\" values={regionValues} setvalue={setSelectedRegion} type={'Regioni'} lists={regioni} />\n      </div>\n      <div style={{ display: types === 'Province' ? 'block' : 'none' }}>\n        <MultiSelect id=\"province\" values={provinceValues} setvalue={setSelectedProvince} type={'Province'} lists={province} />\n      </div>\n      <div style={{ display: types === 'Nazione' ? 'block' : 'none' }}>\n        <MultiSelect id=\"nazione\" values={[\"Italia\"]} type={'Nazione'} lists={[\"Italia\"]} />\n      </div>\n\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      {/*\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n        </Toolbar>\n      </AppBar>\n      */}\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Drawer\n          container={container}\n          variant=\"temporary\"\n          anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n        >\n          {drawer}\n        </Drawer>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n      {!mobileOpen ?\n        <Ploty \n          handleDrawerToggle={handleDrawerToggle}\n          types={types}\n          field={\n           types === \"Regione\"\n            ? 'denominazione_regione'\n            : 'denominazione_provincia'}\n          regionValues={regionValues}\n          provinceValues={provinceValues}\n        /> :\n        <></>}\n      </main>\n    </div>\n\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/layout'\nimport { Grid, Typography } from '@material-ui/core'\nimport CacheBuster from './components/CacheBuster'\nimport * as moment from 'moment'\n\nfunction App() {\n\n  return (\n    <CacheBuster>\n      {({ loading, isLatestVersion, refreshCacheAndReload }) => {\n        if (loading) return null;\n        if (!loading && !isLatestVersion) {\n          refreshCacheAndReload();\n        }\n\n        // refresh everything to get updated data from Protezione Civile\n        setTimeout(refreshCacheAndReload, moment.duration(5, 'hour').asMilliseconds())\n\n        return (<div id='App'>\n          <Grid container>\n            <Grid item xs={12}>\n              <Layout />\n\n            </Grid>\n            {/* <Grid item xs={12} className='footer'>\n            \n                  <Typography component=\"p\">\n                  I dati rappresentati in questi grafici sono forniti dalla <a href=\"https://github.com/pcm-dpc/COVID-19\">Protezione Civile</a>\n                  </Typography>\n                </Grid> */}\n          </Grid>\n        </div>)\n      }}\n    </CacheBuster>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","Object.defineProperty(exports, \"__esModule\", { value: true });\nconst download_data_1 = require(\"./download-data\");\nconst utils_1 = require(\"./utils\");\nconst moment = require(\"moment\");\nexports.Provinces = [];\nconst url = \"https://raw.githubusercontent.com/numericnews/numericnews.github.io/master/covid-web/dist/dpc-covid19-ita-province.json\";\nconst downloadData = new download_data_1.DownloadData(exports.Provinces, url, p => true, async () => {\n    exports.Provinces.sort((a, b) => moment(a.data).diff(moment(b.data), 'seconds'));\n});\nasync function init() {\n    await downloadData.init();\n}\nexports.init = init;\nfunction provincesToRegions(provinces) {\n    return [...new Set(provinces.map(p => {\n            const prov = exports.Provinces.find(pb => pb.denominazione_provincia.toLowerCase() == p.toLowerCase() && pb.denominazione_regione);\n            if (prov) {\n                return prov.denominazione_regione.toLowerCase();\n            }\n            else {\n                return null;\n            }\n        })\n            .filter(v => v))\n    ];\n}\nexports.provincesToRegions = provincesToRegions;\nfunction regionsToProvinces(regions) {\n    return regions\n        .map(r => {\n        const m = utils_1.max2Any(exports.Provinces.filter(p => p.denominazione_regione.toLowerCase() == r.toLowerCase()\n            && p.denominazione_provincia), p => p.totale_casi);\n        if (m.i >= 0)\n            return m.element.denominazione_provincia;\n        else\n            return null;\n    })\n        .filter(v => v);\n}\nexports.regionsToProvinces = regionsToProvinces;\n//# sourceMappingURL=provinces.js.map","Object.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst provinces_1 = require(\"./provinces\");\nconst regions_1 = require(\"./regions\");\nconst moment = require(\"moment\");\nconst randomcolor = require(\"randomcolor\");\nconst analyze_1 = require(\"./analyze\");\nexports.Provinces = provinces_1.Provinces;\nconst colorSeed = 1;\nfunction filter(field, prov, p) {\n    if (prov.toLowerCase() == \"italia\")\n        return true;\n    else\n        return p[field].toLowerCase() == prov;\n}\nexports.filter = filter;\nasync function generalPlot(field, selectedProvinces, data = null, getY = null) {\n    if (data == null)\n        data = exports.Provinces;\n    const plots = [];\n    let colors = [\n        '#1f77b4',\n        '#ff7f0e',\n        '#2ca02c',\n        '#d62728',\n        '#9467bd',\n        '#8c564b',\n        '#e377c2',\n        '#7f7f7f',\n        '#bcbd22',\n        '#17becf'\n    ].concat(selectedProvinces.length > 10 ? randomcolor({ count: selectedProvinces.length - 10, seed: colorSeed }) : []);\n    let trackOptions = {};\n    let columns = [\n        { label: 'Data', id: 'data', type: 'date' }\n    ];\n    for (let prov of selectedProvinces) {\n        const origProvName = _.upperFirst(prov);\n        columns.push({ label: origProvName, id: origProvName, type: 'number' });\n        columns.push({ label: \"velocita' \" + origProvName, id: \"vel::\" + origProvName, type: 'number' });\n    }\n    plots.push(columns);\n    const rows = [];\n    const allPlots = [];\n    const allVelPlots = [];\n    let i = 0;\n    let ci = 0;\n    for (let prov of selectedProvinces) {\n        const origProvName = _.upperFirst(prov);\n        prov = prov.toLowerCase();\n        const plot_ = plot(data, p => filter(field, prov, p), origProvName, 'scatter', getY);\n        allPlots.push(plot_);\n        trackOptions[columns[i + 1].label] = { color: colors[ci] };\n        i++;\n        const velPlot = plotVelocity(data, p => filter(field, prov, p), \"velocita' \" + origProvName, 'scatter', getY);\n        allVelPlots.push(velPlot);\n        trackOptions[columns[i + 1].label] = { color: colors[ci], strokePattern: [10, 2, 5, 2] };\n        i++;\n        ci++;\n    }\n    let X = null;\n    for (let j = 0; j < selectedProvinces.length; j++) {\n        if (!X)\n            X = allPlots[j].x;\n        else {\n            if (!_.isEqual(X, allPlots[j].x) ||\n                !_.isEqual(X, allVelPlots[j].x))\n                throw new Error(\"Inconsiste X axes \" + JSON.stringify([columns[j - 1], columns[j]]));\n            X = allPlots[j].x;\n        }\n    }\n    for (let i = 0; i < allPlots[0].x.length; i++) {\n        const x = allPlots[0].x[i];\n        const row = [new Date(x)];\n        for (let j = 0; j < selectedProvinces.length; j++) {\n            row.push(allPlots[j].y[i]);\n            row.push(allVelPlots[j].y[i]);\n        }\n        rows.push(row);\n    }\n    return { options: trackOptions, data: [columns].concat(rows) };\n}\nexports.generalPlot = generalPlot;\nasync function projectGeneralPlot(field, selectedRegions, startDate = null) {\n    await provinces_1.init();\n    await regions_1.init();\n    const italia = selectedRegions.find(r => r.toLowerCase() == \"italia\");\n    if (field == 'denominazione_provincia') {\n        selectedRegions = provinces_1.provincesToRegions(selectedRegions);\n        if (italia)\n            selectedRegions.push(italia);\n    }\n    const genPlot = await generalPlot('denominazione_regione', selectedRegions);\n    const growthRatePlot = await generalPlotGrowthRate(\"denominazione_regione\", selectedRegions);\n    const totalePositiviPlot = await generalPlot('denominazione_regione', selectedRegions, regions_1.Regions, (p) => p.totale_positivi);\n    const basePlot = genPlot;\n    const selectedProvincesLength = selectedRegions.length;\n    let latestDate = basePlot.data.slice(-1)[0][0];\n    let startIdx;\n    if (startDate) {\n        const di = basePlot.data.findIndex((d, i) => i > 0 && Math.abs(d[0].getTime() - startDate.getTime()) <= moment.duration(0.5, 'day').asMilliseconds());\n        const d = basePlot.data[di];\n        if (di < 0) {\n            startDate = latestDate;\n            startIdx = -1;\n        }\n        else {\n            startDate = d[0];\n            startIdx = di;\n        }\n    }\n    else {\n        const getAvg = (data) => {\n            const avg = _.range(0, data[1].length - 1).map(a => null);\n            for (let j = 1; j < data[1].length; j++) {\n                let averaged = 0;\n                for (let i = 1; i < data.length; i++) {\n                    if (!_.isFinite(data[i][j]))\n                        continue;\n                    avg[j] += data[i][j];\n                    averaged++;\n                }\n                avg[j] /= averaged;\n            }\n            return analyze_1.average(avg.filter(_.isFinite));\n        };\n        const getNearestIdx = (data, y) => {\n            let md = +Infinity;\n            let mi = -1;\n            for (let j = 1; j < data[1].length; j++) {\n                for (let i = 1; i < data.length; i++) {\n                    if (!_.isFinite(data[i][j]))\n                        continue;\n                    if (Math.abs(data[i][j] - y) < md) {\n                        md = Math.abs(data[i][j] - y);\n                        mi = i;\n                    }\n                }\n            }\n            return { i: mi, y: md };\n        };\n        const D = growthRatePlot.data;\n        const ni = getNearestIdx(D, getAvg(D));\n        if (ni.i >= 0) {\n            startDate = D[ni.i][0];\n            startIdx = ni.i;\n        }\n        else {\n            startDate = latestDate;\n            startIdx = -1;\n        }\n    }\n    const columns = 2 * selectedProvincesLength + 1;\n    const projection = plotProjection(columns, genPlot.data, totalePositiviPlot.data, growthRatePlot.data.slice(startIdx)[0].slice(1), startDate, Math.max(moment(latestDate).diff(startDate, 'days'), 30));\n    const projColumns = basePlot.data[0].slice(1).map(c => Object.assign({}, { label: \"pro. \" + c.label, id: \"pro. \" + c.label }));\n    const newRows = projection;\n    const getMax = (data) => {\n        const maxYs = data[0].map((a, i) => i == 0 ? 0 : analyze_1.max2(data.map((r, j) => j == 0 ? 0 : r[i]).filter(_.isFinite)).max);\n        const maxY = Math.max(...maxYs);\n        return maxY;\n    };\n    const data = [basePlot.data[0].concat(projColumns)].concat(newRows);\n    const dataMax = getMax(basePlot.data);\n    const projDataMax = getMax(data);\n    const safeMax = projDataMax > dataMax ? Math.min(4 * dataMax, projDataMax) : dataMax;\n    return {\n        options: Object.assign(_.mapValues(basePlot.options, (v, k, i) => { (/velocit/i.test(k) ? delete v.strokePattern : ''); return v; }), _.mapValues(_.mapKeys(basePlot.options, (v, k, i) => \"pro. \" + k), o => Object.assign({}, o, { strokePattern: [10, 2, 5, 2] }))),\n        data,\n        startDate,\n        startIdx,\n        gr: growthRatePlot.data.slice(startIdx)[0].slice(1, -1),\n        safeMax,\n        series: growthRatePlot.data[0].slice(1, -1).map(c => c.label),\n        maxDate: basePlot.data.slice(-1)[0][0]\n    };\n}\nexports.projectGeneralPlot = projectGeneralPlot;\nasync function generalPlotGrowthRate(field, selectedProvinces) {\n    const plots = [];\n    let colors = [\n        '#1f77b4',\n        '#ff7f0e',\n        '#2ca02c',\n        '#d62728',\n        '#9467bd',\n        '#8c564b',\n        '#e377c2',\n        '#7f7f7f',\n        '#bcbd22',\n        '#17becf'\n    ].concat(selectedProvinces.length > 10 ? randomcolor({ count: selectedProvinces.length - 10, seed: colorSeed }) : []);\n    let trackOptions = {};\n    let columns = [\n        { label: 'Data', id: 'data', type: 'date' }\n    ];\n    for (let prov of selectedProvinces) {\n        const origProvName = _.upperFirst(prov);\n        columns.push({ label: origProvName, id: origProvName, type: 'number' });\n    }\n    columns.push({ label: 'y=1', id: 'y=1', type: 'number' });\n    plots.push(columns);\n    const rows = [];\n    const allPlots = [];\n    let i = 0;\n    for (let prov of selectedProvinces) {\n        const origProvName = _.upperFirst(prov);\n        prov = prov.toLowerCase();\n        const plot_ = plotGrothRate(exports.Provinces, p => filter(field, prov, p), origProvName, 'scatter');\n        allPlots.push(plot_);\n        trackOptions[columns[i + 1].label] = { color: colors[i] };\n        i++;\n    }\n    let X = null;\n    for (let j = 0; j < selectedProvinces.length; j++) {\n        if (!X)\n            X = allPlots[j].x;\n        else {\n            if (!_.isEqual(X, allPlots[j].x))\n                throw new Error(\"Inconsiste X axes \" + JSON.stringify([columns[j - 1], columns[j]]));\n            X = allPlots[j].x;\n        }\n    }\n    for (let i = 0; i < allPlots[0].x.length; i++) {\n        const x = allPlots[0].x[i];\n        const row = [new Date(x)];\n        for (let j = 0; j < selectedProvinces.length; j++) {\n            row.push(allPlots[j].y[i]);\n        }\n        row.push(1);\n        rows.push(row);\n    }\n    return { options: trackOptions, data: [columns].concat(rows) };\n}\nexports.generalPlotGrowthRate = generalPlotGrowthRate;\nfunction plot(Provinces, filter, name, plotType, getY = (p) => p.totale_casi) {\n    if (getY == null)\n        getY = (p) => p.totale_casi;\n    const map = new Map();\n    for (const p of Provinces) {\n        if (filter(p)) {\n            let y;\n            if (map.has(p.data))\n                y = map.get(p.data);\n            else\n                y = 0;\n            y += getY(p);\n            map.set(p.data, y);\n        }\n    }\n    const X = [];\n    const Y = [];\n    for (const [x, y] of map) {\n        X.push(x);\n        Y.push(y);\n    }\n    return { x: X, y: Y, type: plotType, name };\n}\nexports.plot = plot;\nfunction _plotVelocity(P) {\n    let y0 = 0;\n    const vY = [];\n    for (let i = 0; i < P.x.length; i++) {\n        const x = P.x[i];\n        const y = P.y[i];\n        const dy = y - y0;\n        y0 = y;\n        vY.push(dy);\n    }\n    P.y = vY;\n    return P;\n}\nexports._plotVelocity = _plotVelocity;\nfunction plotVelocity(Provinces, filter, name, plotType, getY = (p) => p.totale_casi) {\n    const P = plot(Provinces, filter, name, plotType, getY);\n    return _plotVelocity(P);\n}\nexports.plotVelocity = plotVelocity;\nfunction plotGrothRate(Provinces, filter, name, plotType) {\n    const PT = plot(Provinces, filter, name, plotType);\n    const V = _plotVelocity(PT);\n    const gY = [];\n    for (let i = 0; i < V.x.length; i++) {\n        const v0 = i > 0 ? V.y[i - 1] : 0;\n        const v1 = V.y[i];\n        gY.push(v1 / v0);\n    }\n    PT.y = gY;\n    return PT;\n}\nconst oneDayMs = moment.duration(1, 'days').asMilliseconds();\nfunction plotProjection(columns, realPlots, totalePositiviPlot, growthRates, startDate, days) {\n    realPlots = realPlots.slice(1).map(r => r.slice());\n    if (!(columns > 1 && columns % 2 == 1))\n        throw new Error(\"Invalid columns number. Columns should be: Date, Prov1, Vel1, Prov2, Vel2, ... So it should be > 0 and odd\");\n    let v = realPlots.findIndex(P => P[0].getTime() == startDate.getTime());\n    let I0 = v < 0 ?\n        _.range(0, columns).map((v, i) => i % 2 == 1 ? 0 : 1) :\n        totalePositiviPlot[v].slice();\n    const nullRow = _.range(0, columns - 1).map(a => null);\n    for (let d = 0; d < v; d++) {\n        realPlots[d] = realPlots[d].concat(nullRow.slice());\n    }\n    realPlots[v] = realPlots[v].concat(realPlots[v].slice(1));\n    const origRealPlot = realPlots.slice(v + 1).map(r => r.slice());\n    const dEnd = Math.max(days, realPlots.length - v - 1);\n    for (let d = 1; d < dEnd + 1; d++) {\n        const i = v + d;\n        realPlots[i] = realPlots[i] || [];\n        realPlots[i][0] = new Date(startDate.getTime() + oneDayMs * d);\n        for (let j = 1; j < columns; j += 2) {\n            const gj = Math.floor(j / 2);\n            const prevI = i > v + 1 ? realPlots[i - 1][j] : I0[j];\n            realPlots[i][j + 1] =\n                growthRates[gj] >= 1 ?\n                    prevI * (growthRates[gj] - 1) :\n                    null;\n            const vel = realPlots[i][j + 1];\n            realPlots[i][j] = prevI + vel;\n        }\n    }\n    for (let d = 1; d < dEnd + 1; d++) {\n        const i = v + d;\n        const oi = d - 1;\n        realPlots[i] = [realPlots[i][0]]\n            .concat(oi < origRealPlot.length ? origRealPlot[oi].slice(1) : nullRow.slice())\n            .concat(realPlots[i].slice(1));\n    }\n    return realPlots;\n}\nfunction getProvinces() {\n    return [...(new Set(exports.Provinces.map(p => p.denominazione_provincia)))];\n}\nexports.getProvinces = getProvinces;\nfunction getRegions() {\n    return [...(new Set(exports.Provinces.map(p => p.denominazione_regione)))];\n}\nexports.getRegions = getRegions;\n//# sourceMappingURL=totaleCasi.js.map","Object.defineProperty(exports, \"__esModule\", { value: true });\nconst _ = require(\"lodash\");\nconst percentile = require(\"percentile\");\nfunction stdDev(N, avg = null) {\n    avg = _.isNumber(avg) ? avg : average(N);\n    let variance = 0;\n    for (const n of N) {\n        variance += (n - avg) ** 2;\n    }\n    return Math.sqrt(variance);\n}\nexports.stdDev = stdDev;\nfunction average(N) {\n    let sum = 0;\n    for (const n of N) {\n        sum += n;\n    }\n    return sum / N.length;\n}\nexports.average = average;\nfunction max2(N) {\n    let max = -Infinity;\n    let maxI = -1;\n    for (let i = 0; i < N.length; i++) {\n        if (N[i] > max) {\n            max = N[i];\n            maxI = i;\n        }\n    }\n    return { max, i: maxI };\n}\nexports.max2 = max2;\nfunction min2(N) {\n    let min = +Infinity;\n    let minI = -1;\n    for (let i = 0; i < N.length; i++) {\n        if (N[i] < min) {\n            min = N[i];\n            minI = i;\n        }\n    }\n    return { min, i: minI };\n}\nfunction averageOfAbovePreviousMax(startIndex, y) {\n    const max = Math.max(...y.slice(0, startIndex));\n    const deltas = y.slice(startIndex)\n        .map(yi => {\n        const d = yi - max;\n        return d > 0 ? d : 0;\n    })\n        .filter(yi => yi);\n    return average(deltas);\n}\nfunction smallYBounds(plot, p = 1) {\n    const min = [];\n    const max = [];\n    for (let j = 1; j < plot[0].length; j++) {\n        const image = plot.map(p => p[j]).filter(_.isFinite);\n        min.push(percentile(p, image));\n        max.push(percentile(100 - p, image));\n    }\n    return [Math.min(...min.filter(_.isFinite)), Math.max(...max.filter(_.isFinite))];\n}\nexports.smallYBounds = smallYBounds;\n//# sourceMappingURL=analyze.js.map"],"sourceRoot":""}