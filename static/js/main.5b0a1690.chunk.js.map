{"version":3,"sources":["components/CacheBuster.js","components/multiselect.js","components/ploty.js","components/layout.js","App.js","serviceWorker.js","index.js"],"names":["global","appVersion","packageJson","version","CacheBuster","props","state","loading","isLatestVersion","refreshCacheAndReload","console","log","caches","window","keys","then","names","name","delete","location","reload","fetch","response","json","meta","latestVersion","versionA","versionB","versionsA","split","versionsB","length","a","Number","shift","b","isNaN","semverGreaterThan","setState","this","children","React","Component","icon","fontSize","checkedIcon","useStyles","makeStyles","theme","input","color","MultiSelect","classes","Autocomplete","multiple","size","disablePortal","options","lists","disableCloseOnSelect","getOptionLabel","option","value","values","onChange","event","newValue","setvalue","type","style","background","padding","renderOption","selected","Fragment","Checkbox","marginRight","checked","renderInput","params","TextField","InputProps","variant","label","placeholder","id","Math","random","globalState","exponentialGrowthComment","Typography","component","href","src","height","width","alt","TabPanel","index","other","role","hidden","aria-labelledby","Box","p","PlotComponent","date","Date","toLocaleString","projPlotStart","activeStep","open","types","field","regionValues","provinceValues","GoogleCharts","load","_draw","getSelectedItems","ev","innerWidth","orHandler","onOrientationChange","bind","addEventListener","removeEventListener","prevProps","prevState","_","Object","resize","selectedItems","colorStr","Dygraph","toRGB_","r","floor","g","e","ctx","drawingContext","points","y_bottom","dygraph","toDomYCoord","fillStyle","darkenColor","min_sep","Infinity","i","sep","canvasx","bar_width","j","center_x","fillRect","canvasy","strokeRect","data","labels","getLabels","x","series","map","dashHTML","labelHTML","nowZeroSec","setSeconds","setMilliseconds","html","xHTML","dateString_","forEach","isVisible","labeledData","yHTML","isHighlighted","strokePattern","getOption","border","render","initProvinces","generalPlotGrowthRate","grPlot","drawGrowthRatePlot","yBounds","smallYBounds","slice","lastDate","lastGrowthRates","column","concat","gviz","api","visualization","arrayToDataTable","legendFormatter","strokeWidth","legend","labelsDiv","colorValue","digitsAfterDecimal","valueRange","drawGrowthRateGraph","document","getElementById","row","seriesName","ann","ystr","yval","datestr","moment","format","maxlength","max","text","push","xval","tickHeight","setAnnotations","point","annotationOnHighlight","generalPlot","plot","drawChartPlot","drawChartGraph","destroy","ready","startDate","getMax","maxYs","max2","filter","getAvg","avg","averaged","average","getNearestIdx","y","md","mi","abs","startIdx","D","ni","findIndex","getTime","gr","c","projectGeneralPlot","dataMax","projDataMax","safeMax","min","calculateProjectionChart","drawProjectionChartGraph","updateOptions","pointClickRadius","pointClickCallback","idx","file","testsPlot","plotT","plotP","firstCasiTestati","firstCasiTestatiMap","yPBounds","optionsT","drawTampTChartGraph","optionsP","drawTampPChartGraph","drawChart","drawTamponiChart","drawGrowthRate","drawProjectionChart","recentDateWindow","subtract","toDate","velocityPlots","dateWindow","handleDrawerToggle","lastGrowthRate","firstCasiTestatiDate","firstCasiTestatiDateStr","tamponiExplanation","className","onClick","zoomVelocity","d","key","n","toFixed","join","contentBody","maxWidth","innerHeight","provRegs","doubleClickZoomHint","left","top","position","Tabs","handleChange","aria-label","scrollButtons","Tab","Grid","container","item","xs","getContent","root","drawer","breakpoints","up","flexShrink","menuButton","borderRadius","drawerPaper","textAlign","content","PersistentDrawerRight","useTheme","useState","mobileOpen","setMobileOpen","setTypes","province","setProvince","regioni","setRegioni","setRegionValues","setProvinceValues","useEffect","getProvinces","sort","getRegions","foo","toolbar","noWrap","paddingLeft","paddingBottom","float","cursor","Divider","ToggleButtonGroup","exclusive","newFormats","ToggleButton","display","CssBaseline","Drawer","anchor","direction","onClose","paper","ModalProps","keepMounted","App","setTimeout","asMilliseconds","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","StrictMode","URL","process","origin","headers","contentType","get","status","indexOf","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5b0a1690.chunk.js","sourcesContent":["// from https://dev.to/flexdinesh/cache-busting-a-react-app-22lk\n\nimport React from 'react';\nimport packageJson from '../../package.json';\nglobal.appVersion = packageJson.version;\n\n\n// version from response - first param, local version second param\nconst semverGreaterThan = (versionA, versionB) => {\n  const versionsA = versionA.split(/\\./g);\n\n  const versionsB = versionB.split(/\\./g);\n  while (versionsA.length || versionsB.length) {\n    const a = Number(versionsA.shift());\n\n    const b = Number(versionsB.shift());\n    // eslint-disable-next-line no-continue\n    if (a === b) continue;\n    // eslint-disable-next-line no-restricted-globals\n    return a > b || isNaN(b);\n  }\n  return false;\n};\n\nclass CacheBuster extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      isLatestVersion: false,\n      refreshCacheAndReload: () => {\n        console.log('Clearing cache and hard reloading...')\n        const caches = window.caches\n        if (caches) {\n          // Service worker cache should be cleared with caches.delete()\n          caches.keys().then(function(names) {\n            for (let name of names) caches.delete(name);\n          });\n        }\n\n        // delete browser cache and hard reload\n        window.location.reload(true);\n      }\n    };\n  }\n\n  componentDidMount() {\n    fetch('/meta.json')\n      .then((response) => response.json())\n      .then((meta) => {\n        const latestVersion = meta.version;\n        const currentVersion = global.appVersion;\n\n        const shouldForceRefresh = semverGreaterThan(latestVersion, currentVersion);\n        if (shouldForceRefresh) {\n          console.log(`We have a new version - ${latestVersion}. Should force refresh`);\n          this.setState({ loading: false, isLatestVersion: false });\n        } else {\n          console.log(`You already have the latest version - ${latestVersion}. No cache refresh needed.`);\n          this.setState({ loading: false, isLatestVersion: true });\n        }\n      });\n  }\n  render() {\n    const { loading, isLatestVersion, refreshCacheAndReload } = this.state;\n    return this.props.children({ loading, isLatestVersion, refreshCacheAndReload });\n  }\n}\n\nexport default CacheBuster;\n","/* eslint-disable no-use-before-define */\n\nimport React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst icon = <CheckBoxOutlineBlankIcon fontSize=\"small\" />;\nconst checkedIcon = <CheckBoxIcon fontSize=\"small\" />;\n\nconst useStyles = makeStyles((theme) => ({\n  input: {\n    '&::placeholder': {\n      color: '#FFF',\n    },\n  },\n}))\nexport default function MultiSelect(props) {\n  const classes = useStyles();\n\n  // disablePortal=true, altrimenti nel mobile non si riesce a selezione le checkbox\n    \n  return (\n    <Autocomplete\n      multiple\n      size=\"small\"\n      disablePortal={true}  \n      options={props.lists}\n      disableCloseOnSelect\n      getOptionLabel={(option) => option}\n      value={props.values}\n      onChange={(event, newValue) => {\n        props.setvalue(newValue,props.type)\n      }}\n      style={{background:'#FFF',padding:20}}\n      renderOption={(option, { selected }) => {\n      return(\n        <React.Fragment>\n        <Checkbox\n          icon={icon}\n          checkedIcon={checkedIcon}\n          style={{ marginRight: 8 }}\n          checked={selected}\n        />\n        {option}\n      </React.Fragment>\n      )\n        \n      \n}}\n      renderInput={(params) => (\n        <TextField \n        InputProps={{\n          classes: { input: classes.input}\n        }}\n        style={{color:'#FFF'}}\n        {...params} variant=\"outlined\" label=\"\" placeholder={props.type} />\n      )}\n      id={props.id+Math.random()}\n    />\n  );\n}\n","import React, { Component } from 'react';\n\nimport { GoogleCharts } from 'google-charts'\n\nimport Dygraph from 'dygraphs'\n\nimport { generalPlot, generalPlotGrowthRate, projectGeneralPlot } from 'covid-web/totaleCasi'\nimport { testsPlot } from 'covid-web/tamponi'\nimport { init as initProvinces } from 'covid-web/provinces'\n\nimport * as _ from 'lodash'\nimport { Grid, Typography, Tabs, Tab, Box } from '@material-ui/core'\n\nimport PropTypes from 'prop-types';\nimport { smallYBounds, max2, average } from 'covid-web/analyze';\nimport * as moment from 'moment'\nimport {dateString_} from 'dygraphs/src/dygraph-utils'\n\nconst globalState = {}\n\n\nconst exponentialGrowthComment = (\n    <Typography component=\"p\">\n      Dettagli sui calcoli: il growth rate in data t e' stimato usando la formula: <br></br> r(t) = (I(t)-I(t-1)) / (I(t-1)-I(t-2)) = v(t) / v(t-1)\n      <br></br>\n      dove I(t) e' il numero totale dei casi al tempo t, v(t) e' la velocita' al tempo t.\n      Per una motivazione dell'uso di tale formula, vedi <a href=\"http://katolaz.net/covid-2019/growth.html\">Epidemic 101</a>\n      <br></br>\n      Da tale stima, la formula per il calcolo del numero di casi al tempo t e': <img src=\"/eq_growth.svg\" style={{ height: \"50%\", width: \"auto\" }} alt=\"I(t)=r**t*I(0)\"></img>, dove I(0) e' il numero di infetti iniziali. \n      <br></br> \n      Nota: questa formula e' una forte semplificazione del reale fenomeno dell'epidemia corona virus,\n      ma essendo l'epidemia di carattere esponenziale, rende comunque una idea di come l'epidemia potrebbe\n      evolvere senza misure di contenimento, di lock-down e vaccinazione.\n      <br></br>\n      Gli scienziati stanno ancora studiando le dinamiche dell'epidemia Coronavirus. Tuttavia, un growth rate maggiore di uno implica un altissimo valore di crescita. Per approfondire sull'exponential growth rate vedi\n      {' '}<a href=\"http://katolaz.net/covid-2019/growth.html\">Epidemic 101</a>, \n      {' '}<a href=\"https://www.youtube.com/watch?v=Kas0tIxDvrg&t=81s\">3Blue1Brown Youtube</a>, \n      {' '}<a href=\"https://en.wikipedia.org/wiki/Basic_reproduction_number\">R0 (wikipedia)</a>, \n      {' '}<a href=\"https://www.ncbi.nlm.nih.gov/pubmed/32007643\">Zhao, Lin, et al.</a>\n      {' '}(\"The early outbreak data largely follows the exponential growth. [We estimated a] mean R0 from 2.24 to 3.58\").\n      <br></br>\n      Ci sono formule e modelli molto piu' rifiniti, precisi e validi, che tengono conto\n      delle diverse possibili fasi ed evoluzioni della malattia nel singolo individuo,\n      tuttavia la dinamica di base dell'exponential growth e' la stessa.\n    </Typography>\n)\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={!value || value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n      style={{height:'100%'}}\n    >\n      {value === index && <Box style={{height:'50%'}} p={3}>{children}</Box>}\n    </Typography>\n\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nclass PlotComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date().toLocaleString(),\n      projPlotStart: null,\n      activeStep: 0,\n      value: 1,\n      open: false\n    }\n  }\n\n  getSelectedItems() {\n      \n      if (this.props.types == \"Nazione\")\n          return [\"Italia\"]\n\n      if (this.props.field === \"denominazione_regione\")\n          return this.props.regionValues\n      else \n          return this.props.provinceValues\n\n  }\n\n  componentWillMount() {\n    GoogleCharts.load(() => {\n      this._draw(this.props.field, this.getSelectedItems())\n    });\n  }\n\n  onOrientationChange(ev) {\n    this.setState({innerWidth: window.innerWidth})\n  }\n\n  componentDidMount() {\n      const orHandler = this.onOrientationChange.bind(this)\n      this.setState({ onOrientationChange: orHandler }, () => {\n          window.addEventListener(\"orientationchange\", orHandler)\n          // window.addEventListener(\"onresize\", this.resizeAll)\n      })\n  }\n\n  componentWillUnmount() {\n      if (this.state.onOrientationChange)\n          window.removeEventListener(\"orientationchange\", this.state.onOrientationChange)\n  //  window.removeEventListener(\"onresize\", this.resizeAll)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n\n\n    if (prevProps.types !== this.props.types ||\n        prevProps.field !== this.props.field ||\n      !_.isEqual(prevProps.regionValues, this.props.regionValues) ||\n      !_.isEqual(prevProps.provinceValues, this.props.provinceValues)\n    ) {\n\n      const selectedItems = this.getSelectedItems()\n      if (!selectedItems.length) return;\n\n      this._draw(this.props.field, selectedItems)\n\n    } else if (prevState.innerWidth != this.state.innerWidth) {\n      // resize all\n      for (const field of Object.keys(globalState)) {\n        const value = globalState[field]\n        if (_.isObject(value) && 'resize' in value && _.isFunction(value.resize)) {\n          value.resize()\n        }\n      }\n    }\n\n  }\n\n  // Darken a color\n  darkenColor(colorStr) {\n    // Defined in dygraph-utils.js\n    var color = Dygraph.toRGB_(colorStr);\n    color.r = Math.floor((255 + color.r) / 2);\n    color.g = Math.floor((255 + color.g) / 2);\n    color.b = Math.floor((255 + color.b) / 2);\n    return 'rgb(' + color.r + ',' + color.g + ',' + color.b + ')';\n  }\n\n  // This function draws bars for a single series. See\n  // multiColumnBarPlotter below for a plotter which can draw multi-series\n  // bar charts.\n  barChartPlotter(e) {\n    var ctx = e.drawingContext;\n    var points = e.points;\n    var y_bottom = e.dygraph.toDomYCoord(0);\n\n    ctx.fillStyle = this.darkenColor(e.color);\n\n    // Find the minimum separation between x-values.\n    // This determines the bar width.\n    var min_sep = Infinity;\n    for (var i = 1; i < points.length; i++) {\n      var sep = points[i].canvasx - points[i - 1].canvasx;\n      if (sep < min_sep) min_sep = sep;\n    }\n    var bar_width = Math.floor(2.0 / 3 * min_sep);\n\n    // Do the actual plotting.\n    for (var j = 0; j < points.length; j++) {\n      var p = points[j];\n      var center_x = p.canvasx;\n\n      ctx.fillRect(center_x - bar_width / 2, p.canvasy,\n        bar_width, y_bottom - p.canvasy);\n\n      ctx.strokeRect(center_x - bar_width / 2, p.canvasy,\n        bar_width, y_bottom - p.canvasy);\n    }\n  }\n\n\n  legendFormatter(data) {\n    const g = data.dygraph\n    const labels = g ? g.getLabels() : []\n    if (data.x === null) {\n      // This happens when there's no selection and {legend: 'always'} is set.\n      return data.series\n                  .map(series => \n                          '<div>' + series.dashHTML + '</div>' +\n                          '<div>' + series.labelHTML + '</div>'\n                        )\n\n    }\n    const nowZeroSec = new Date(); nowZeroSec.setSeconds(0); nowZeroSec.setMilliseconds(0);\n    var html = '<div>' + ( \n            this.getLabels()[0] + ': ' + (data.xHTML || dateString_(nowZeroSec))\n    )  + '</div>' ;\n    data.series.forEach((series, i) => {\n      if (!series.isVisible) return;\n      var labeledData = series.labelHTML  + (series.yHTML ? ': ' + series.yHTML + \"&nbsp;\" : ': ------');\n      if (series.isHighlighted) {\n        labeledData = '<b>' + labeledData + '</b>';\n      }\n      var strokePattern = i>0 && g ? g.getOption('strokePattern', labels[i+1]) : [];\n      const border = \n            (!strokePattern || strokePattern.length <= 1 ? \"solid \" : \"dashed \") +\n           (series.color || \"white\") +\n           \" 3px\"\n      html += `<div style=\"border-bottom: ${border}\">` +labeledData+ '</div>';\n    });\n\n    return html;\n  }\n\n  async drawGrowthRate(field, selectedItems, render = true) {\n\n\n    await initProvinces();\n\n    const grPlot = await generalPlotGrowthRate(field, selectedItems)\n    globalState.drawGrowthRatePlot = grPlot\n    const yBounds = smallYBounds(grPlot.data.slice(1), 5)\n\n    const lastDate = grPlot.data[grPlot.data.length - 1][0] // convert the last date to string\n    const lastGrowthRates = grPlot.data[0].map((column, i) => {\n      return [column.label]\n        .concat([grPlot.data[grPlot.data.length - 1][i]]) // take the growth rate of column i\n    }).slice(1, grPlot.data[0].length - 1) // note: length-1 is for removing \"crescita zero\" column\n    this.setState({\n      lastGrowthRates: {\n        data: lastGrowthRates,\n        date: lastDate\n      }\n    })\n\n    grPlot.gviz = GoogleCharts.api.visualization.arrayToDataTable(grPlot.data);\n\n    const options = {\n      legendFormatter: this.legendFormatter,\n      // labelsSeparateLines: true,\n      strokeWidth: 3,\n      legend: 'always',\n      labelsDiv: 'growthRateLegendDiv',\n      colorValue: 1,\n      digitsAfterDecimal: 4,\n      series: grPlot.options,\n      valueRange: yBounds\n    }\n\n    if (render) {\n      globalState.drawGrowthRateGraph = new Dygraph(\n        document.getElementById(\"growthRatePlotDiv\"),\n        grPlot.gviz,\n        options\n      )\n      globalState.drawGrowthRateGraph.resize()\n    }\n\n\n  }\n\n  annotationOnHighlight(g, ev, x, points, row, seriesName) {\n    const ann = []\n\n    for (const p of points) {\n      const ystr = '' + p.yval\n      const datestr = moment(x).format(\"DD MMM\")\n      const maxlength = Math.max(ystr.length, datestr.length)\n      const text = `${ystr}<br>${datestr}`\n      const length = maxlength / 1.5\n      const lines = 2\n      ann.push({\n        series: p.name,\n        xval: x,\n        width: 18 * length,\n        height: 23 * lines,\n        tickHeight: 4,\n        html: text\n      })\n    }\n\n    g.setAnnotations(ann)\n  }\n\n  annotationOnPointClick(g, ev, point) {\n    return this.annotationOnHighlight(g, ev, point.xval, [point])\n  }\n\n  async drawChart(field, selectedItems, render = true) {\n\n    await initProvinces(); // C: no sense. A: just common sense :)\n\n    const plot = await generalPlot(field, selectedItems)\n    globalState.drawChartPlot = plot\n\n    plot.gviz = GoogleCharts.api.visualization.arrayToDataTable(plot.data);\n\n    const options = {\n      legendFormatter: this.legendFormatter,\n      // labelsSeparateLines: true,\n      strokeWidth: 3,\n      legend: 'always',\n      labelsDiv: 'legendDiv',\n      colorValue: 1,\n      series: plot.options,\n    }\n\n    if (render) {\n      if (globalState.drawChartGraph)\n        globalState.drawChartGraph.destroy()\n\n      globalState.drawChartGraph = new Dygraph(\n        document.getElementById(\"plotDiv\"),\n        plot.gviz,\n        options\n      )\n      globalState.drawChartGraph.ready(()=>{\n        globalState.drawChartGraph.resize()\n      })\n        /* does not work when zooming\n      const g = globalState.drawChartGraph\n      g.ready(() => {\n        g.updateOptions({\n          pointClickRadius: 50,\n          pointClickCallback: this.annotationOnPointClick.bind(this, g)\n        })\n      })\n      */\n    }\n\n  }\n\n  /*\nasync drawR0(field, selectedItems, render = true) {\n\n  await initProvinces();\n\n  const plot = await plotR0(field, selectedItems)\n  globalState.drawR0Plot = plot\n\n  plot.gviz = GoogleCharts.api.visualization.arrayToDataTable(plot.data);\n\n  const options = {\n    legendFormatter: this.legendFormatter,\n    // labelsSeparateLines: true,\n    strokeWidth: 3,\n    legend: 'always',\n    labelsDiv: 'r0LegendDiv',\n    colorValue: 1,\n    series: plot.options\n  }\n\n  if (render) {\n    globalState.drawR0Graph = new Dygraph(\n      document.getElementById(\"r0PlotDiv\"),\n      plot.gviz,\n      options\n    )\n  }\n\n}\n*/\n\n  async calculateProjectionChart(field, selectedItems, startDate = null) {\n    if (!globalState.drawChartPlot?.data || !globalState.drawGrowthRatePlot?.data)\n      return\n\n    await initProvinces()\n\n\n    const getMax = (data) => {\n        const maxYs = data[0].map((a,i) => \n                        i == 0 ? 0 : max2(data.map((r,j) => j == 0 ? 0 : r[i]).filter(_.isFinite)).max)\n        const maxY = Math.max(...maxYs)\n        return maxY\n    }\n\n    const getAvg = (data) => {\n        const avg = _.range(0, data[1].length - 1).map(a => null)\n        for (let j = 1; j < data[1].length; j++) {\n         let averaged = 0\n         for(let i = 1; i < data.length; i++) {\n               if (!_.isFinite(data[i][j]))\n                 continue\n               avg[j] += data[i][j]\n               averaged++\n         }\n         avg[j] /= averaged\n        }\n        return average(avg.filter(_.isFinite))\n    }\n\n    const getNearestIdx = (data, y) => {\n        let md = +Infinity\n        let mi = -1\n        for (let j = 1; j < data[1].length; j++) {\n         for(let i = 1; i < data.length; i++) {\n             if (!_.isFinite(data[i][j]))\n                 continue\n             if (Math.abs(data[i][j]-y) < md) {\n                 md = Math.abs(data[i][j]-y)\n                 mi = i\n             }\n         }\n        }\n        return {i: mi, y: md}\n    }\n\n    let startIdx = -1\n    if (!startDate) {\n        const D = globalState.drawGrowthRatePlot.data\n        const ni = getNearestIdx(D, getAvg(D))\n        if (ni.i >= 0) {\n            startDate = D[ni.i][0]\n            startIdx = ni.i\n        }\n    }\n    if (startDate && startIdx < 0) {\n        startIdx = globalState.drawGrowthRatePlot.data.findIndex((r,i) => i > 0 && r[0].getTime() == startDate.getTime())\n    }\n\n    this.setState({\n      projPlotStart: {\n        gr: startIdx >= 0 ? globalState.drawGrowthRatePlot.data[startIdx].slice(1, -1) : [],\n        date: startDate,\n        series: globalState.drawGrowthRatePlot.data[0].slice(1, -1).map(c => c.label)\n      }\n    })\n\n    const plot = await projectGeneralPlot(selectedItems.length, globalState.drawChartPlot, globalState.drawGrowthRatePlot, startDate)\n\n\n    plot.gviz = GoogleCharts.api.visualization.arrayToDataTable(plot.data);\n\n    const dataMax = getMax(globalState.drawChartPlot.data)\n    const projDataMax = getMax(plot.data)\n\n    const safeMax = projDataMax > dataMax ? Math.min(4*dataMax, projDataMax) : dataMax\n\n    return {plot, safeMax}\n  }\n\n  /* Important: this function must be AFTER drawChart() and drawGrowthRateChart() */\n  async drawProjectionChart(field, selectedItems, startDate = null) {\n\n    const {plot, safeMax} = await this.calculateProjectionChart(field, selectedItems, startDate)\n\n    const options = {\n      legendFormatter: this.legendFormatter,\n      // labelsSeparateLines: true,\n      strokeWidth: 3,\n      legend: 'always',\n      labelsDiv: 'projLegendDiv',\n      colorValue: 1,\n      series: plot.options,\n      valueRange: [0, safeMax],\n    }\n\n    if (globalState.drawProjectionChartGraph)\n      globalState.drawProjectionChartGraph.destroy()\n\n    globalState.drawProjectionChartGraph = new Dygraph(\n      document.getElementById(\"projPlotDiv\"),\n      plot.gviz,\n      options\n    )\n    globalState.drawProjectionChartGraph.resize()\n\n    const g = globalState.drawProjectionChartGraph\n    g.ready(() => {\n          g.updateOptions({ \n              pointClickRadius: 50,\n              pointClickCallback: async (ev, point) => {\n                const i = point.idx\n                const data = globalState.drawChartPlot.data\n                const startDate = data[i+1][0]\n                const {plot, safeMax} = await this.calculateProjectionChart(field, selectedItems, startDate)\n                g.updateOptions({ \n                    file: plot.gviz,\n                    valueRange: [0, safeMax]\n                })\n              }\n          })\n    })\n\n\n  }\n\n  async drawTamponiChart(field, selectedItems) {\n\n    //await initProvinces()\n    //await initRegions() done internally by testsPlot()\n\n    const plotT = await testsPlot(field, selectedItems, 0)\n    const plotP = _.cloneDeep(plotT)\n\n    this.setState({ firstCasiTestati: plotT.firstCasiTestatiMap })\n\n    for (let i = 1; i < plotT.data.length; i++) {\n      for (let j = 1; 2 * j < plotT.data[i].length; j++) {\n        plotT.data[i][2 * j] = null\n        plotP.data[i][2 * (j - 1) + 1] = null\n      }\n    }\n\n    const yPBounds = smallYBounds(plotP.data.slice(1), 1)\n\n    plotT.gviz = GoogleCharts.api.visualization.arrayToDataTable(plotT.data);\n\n    plotP.gviz = GoogleCharts.api.visualization.arrayToDataTable(plotP.data);\n\n    const optionsT = {\n      legendFormatter: this.legendFormatter,\n      // labelsSeparateLines: true,\n      strokeWidth: 3,\n      legend: 'always',\n      labelsDiv: 'tampTLegendDiv',\n      colorValue: 1,\n      series: plotT.options,\n    }\n\n    globalState.drawTampTChartGraph = new Dygraph(\n      document.getElementById(\"tampTPlotDiv\"),\n      plotT.gviz,\n      optionsT\n    )\n    globalState.drawTampTChartGraph.resize()\n\n    const optionsP = _.clone(optionsT)\n    optionsP.labelsDiv = 'tampPLegendDiv'\n    optionsP.series = _.clone(optionsT.series)\n    optionsP.valueRange = [0, Math.min(100, yPBounds[1])]\n\n    globalState.drawTampPChartGraph = new Dygraph(\n      document.getElementById(\"tampPPlotDiv\"),\n      plotP.gviz,\n      optionsP\n    )\n    globalState.drawTampPChartGraph.resize()\n\n  }\n\n  async  _draw(field, selectedItems) {\n    switch (this.state.value) {\n      case 1:\n        await this.drawChart(field, selectedItems);\n        break;\n\n      case 2:\n        await this.drawTamponiChart(field, selectedItems)\n        break\n\n      case 3:\n        await this.drawGrowthRate(field, selectedItems);\n        break;\n\n      case 4:\n\n        // projectionChart needs up-to-date base chart and grow-rate-chart\n        await this.drawChart(field, selectedItems, false);\n        await this.drawGrowthRate(field, selectedItems, false);\n\n        await this.drawProjectionChart(field, selectedItems)\n\n        break;\n\n      default:\n        break\n    }\n  }\n\n  zoomVelocity() {\n\n    if (!globalState.drawChartGraph || !globalState.drawChartPlot)\n        return\n\n    const recentDateWindow = [moment().subtract(30, 'days').toDate(), new Date()]\n\n    const velocityPlots = globalState.drawChartPlot.data\n        .map((r,i) => i == 0 ? \n                r : \n                r.map((c,i) =>\n                    i == 0 || i % 2 == 0 ? \n                        c : \n                        'not-vel')\n                 .filter(c => c != 'not-vel'))\n        .filter((r,i) => i == 0 || r[0].getTime() >= recentDateWindow[0].getTime())\n                \n\n    const yBounds = smallYBounds(velocityPlots.slice(1), 5)\n\n    console.log(yBounds)\n\n    globalState.drawChartGraph.updateOptions({\n        valueRange: [0, yBounds[1]],\n        dateWindow: recentDateWindow\n    })\n  }\n\n  handleChange(event, value) {\n    if (value == 0) {\n        this.props.handleDrawerToggle()\n        return\n    }\n    const { field } = this.props;\n    const selectedItems = this.getSelectedItems(); \n    this.setState({ value: value }, () => {\n      this._draw(field, selectedItems)\n    })\n  }\n\n  getLabel() {\n    const { value } = this.state;\n    switch (value) {\n      default: return 'Approfondimento'\n    }\n  }\n\n  getContent() {\n\n    const {  \n        lastGrowthRates, value, projPlotStart, firstCasiTestati\n    } = this.state;\n\n    const lastGrowthRate = lastGrowthRates\n\n    const firstCasiTestatiDate = firstCasiTestati && new Date(Math.max(...firstCasiTestati.values()))\n    const firstCasiTestatiDateStr = firstCasiTestatiDate ? firstCasiTestatiDate.toLocaleString() : '[non disponibile]'\n\n    const tamponiExplanation = (\n      <div className=\"explanation\">\n        <Typography component=\"p\">\n          <br></br>\n          In questi due grafi viene rappresentata la percentuale di tamponi risultati positivi\n          e il numero totale di tamponi effettuati in un dato giorno.\n          <br></br>\n          <br></br>\n          Dettagli: a partire da giorno {firstCasiTestatiDateStr}, il numero dei tamponi e' sostituito dal numero \n          di \"casi testati\". Questo perche' i tamponi vengono fatti piu' volte ad una stessa persona. \n          \"Casi testati\", invece, non conta i tamponi duplicati, quindi una persona viene conteggiata una volta sola.\n          <br></br>\n          Prima di giorno {firstCasiTestatiDateStr}, questo parametro non era disponibile. Per piu' informazioni,\n          vedi  <a href=\"https://www.youtrend.it/2020/03/25/coronavirus-il-rebus-dei-tamponi-multipli/\">Lorenzo Ruffino</a>.\n          <br></br>\n          Nota: non e' disponibile il numero di tamponi per provincia, ma solo per regione.\n          <br></br>\n          Nota: nei primi giorni di cambio da \"tamponi\" a \"casi testati\", ci sono state delle irregolarita' nei dati di Lombardia, Lazio e Campania. Piu' precisamente, giorno 20 e 21 aprile, vedi <a href=\"https://github.com/pcm-dpc/COVID-19/blob/master/note/dpc-covid19-ita-note-it.csv\">Note DPC</a>.\n         </Typography>\n      </div>\n    )\n\n\n    const contentBody = () => {\n        switch (value) {\n               \n          case 1:\n                return (\n              <div className=\"explanation\">\n                <Typography component=\"p\">\n                  Totale casi: sono tutte le persone che sono state certificate essere infette da coronavirus. Questo numero e' uguale alla somma \"persone attualmente positive\" + \"persone guarite\" + \"persone decedute\"\n                </Typography>\n                <br></br>\n                <Typography component=\"p\">\n                  Velocita': indica quanto velocemente aumentano i casi. Se un giorno la velocita' e' 10, vuol dire che dal giorno precedente ci sono stati 10 casi in piu'.\n                </Typography>\n                <Typography component=\"p\">\n                  Fai uno zoom sulla velocita': <button onClick={() => this.zoomVelocity()}>zoom</button>.\n                </Typography>\n                <br></br>\n              </div>\n            )\n\n          case 2: return tamponiExplanation;\n\n          case 3: return (\n            <div className=\"explanation\">\n              <Typography component=\"p\">\n                In data {lastGrowthRate?.date ? lastGrowthRate?.date.toLocaleString() : '[non-disponibile]'}, i growth rate sono:\n                          <br></br>\n                <br></br>\n                {\n                  lastGrowthRate?.data ?\n                    lastGrowthRate.data.map((d, i) =>\n                      <span key={i}>{d\n                        .map(n => _.isNumber(n) ? n.toFixed(4) : n)\n                        .join(' ')\n                      }\n                        <br></br></span>) :\n                    '[non disponibile]'\n                }\n              </Typography>\n\n              <br></br>\n              <Typography component=\"p\">\n                Growth rate: rapporto tra la velocita' di un giorno e quella del giorno precedente. E' una quantita' importante perche' e' una stima della crescita della velocita'. Se il growth rate e' maggiore di 1, allora la velocita' sta' crescendo. Se e' minore, sta' diminuendo. L'epidemia finisce solo se la velocita' scende e rimane a zero.\n                </Typography>\n              <br></br>\n              <Typography component=\"p\">\n                La crescita del numero di casi in un'epidemia come il Coronavirus e' esponenziale.\n                In una crescita esponenziale anche valori poco piu' alti (growth rate > 1) implicano un'altissima crescita.\n                Ad esempio, se ci sono 100 infetti, con growth rate 1.22, solo dopo 30 giorni ci saranno 39000 infetti.\n              </Typography>\n              <br></br>\n              {exponentialGrowthComment}\n            </div>\n          );\n\n          case 4: return (\n              <div className=\"explanation\">\n                <Typography component=\"p\">\n                  In questo grafo, viene usato il growth rate per mostrare <b>a grandi linee</b>{' '}\n                  come procederebbe l'epidemia se non venissero fatte delle misure di contenimento e lock-down.\n                  Senza misure di prevenzione, l'andamento dei nuovi casi sarebbe esponenziale.\n                </Typography>\n                {projPlotStart ? (\n                    <Typography component=\"p\">\n                        L'andamento ipotetico graficato (linee tratteggiate) e' a partire da giorno {projPlotStart.date.toLocaleString()},\n                        dove i growth rate erano {projPlotStart.gr.map(r=>r.toFixed(3)).join(', ')} in {projPlotStart.series.join(', ')}.\n                        <br></br>\n                        Clicca su un punto del grafo per graficare l'andamento ipotetico a partire da quel punto. Verra' usato il growth rate di quel giorno (solo su desktop, non funziona da cellulare).\n                    </Typography>\n                    ) :\n                    ''}\n\n              {exponentialGrowthComment}\n              </div>\n            )\n\n          default: return <div />\n        }\n    }\n\n    return (\n        <>\n            {contentBody()}\n            <br></br>\n            I dati rappresentati in questi grafici sono forniti dalla <a href=\"https://github.com/pcm-dpc/COVID-19\">Protezione Civile</a>\n            <br></br>\n            Il codice sorgente per il calcolo dei plot e' disponibile su <a href=\"https://github.com/numericnews/numericnews.github.io/tree/master/covid-web\">github</a>\n        </>\n    )\n  }\n\n\n  handleClose() {\n    this.setState({ open: false });\n  }\n\n  render() {\n\n    const maxWidth = window.innerWidth > window.innerHeight ?\n                        (window.innerWidth - 20/100*window.innerWidth) + 'px' :\n                        (window.innerWidth - 10/100*window.innerWidth) + 'px'\n/*\n    const maxHeight = window.innerHeight > window.innerWidth ?\n                        (window.innerHeight - 10/100*window.innerHeight) + 'px' :\n                        (window.innerHeight - 5/100*window.innerHeight) + 'px'\n*/\n    const { value } = this.state;\n\n    const provRegs = this.props.types == \"Regione\" ? 'regioni' : 'province'\n\n    const doubleClickZoomHint = (\n        <div style={{left:'60px', top:'10px', position: 'absolute', \"font-size\": 'small'}}>\n                Doppio click per resettare lo zoom\n        </div>\n    )\n\n    return (\n\n\n      <React.Fragment>\n        <Tabs \n            onChange={this.handleChange.bind(this)} aria-label=\"ploty tabs\" \n                  variant=\"fullWidth\"\n                  scrollButtons=\"auto\"\n                  className='generalTabs'\n                  value={this.state.value}\n      >\n          <Tab label={\"Altre \"+provRegs}/>\n          <Tab label=\"Totale casi\" />\n          <Tab label=\"Tamponi\" />\n          <Tab label=\"Growth Rate\" />\n          <Tab label=\"Exp Growth Rate\" />\n        </Tabs>\n        <TabPanel label={\"Altre \"+provRegs} value={value} index={0} >\n        empty\n        </TabPanel>\n        <TabPanel label={\"Totale casi\"} value={value} index={1} >\n          <div id=\"totaleCasi\" style={{height:'100%'}}>\n          <Grid container style={{height:(window.innerHeight*75/100)+'px'\n          }}>\n            <Grid item xs={12} md={12} className=\"containerLegend\">\n              <div id='legendDiv'></div>\n              </Grid>\n\n              <Grid item xs={12} md={12} style={{\n                  position: 'relative',\n                  width: '90%',\n                  height: '100%',\n                  maxWidth,\n                 }}>\n                {doubleClickZoomHint}\n                <div id='plotDiv' style={{ width: '100%',height:'100%' }}></div>\n              </Grid>\n              <Grid item xs={12}>\n           {this.getContent()}       \n           </Grid>\n            </Grid>\n          </div>\n        </TabPanel>\n        <TabPanel label={\"Tamponi\"} value={value} index={2}>\n          <div>\n            <Grid container style={{ height: window.innerHeight * 75 / 100 + 'px' }}>\n              <Grid item xs={12} md={12} className=\"containerLegend\">\n                <div id='tampPLegendDiv'></div>\n              </Grid>\n              <Grid item xs={12} md={12} style={{ position: 'relative', width: '100%', height: '100%', maxWidth }}>\n                {doubleClickZoomHint}\n                <div id='tampPPlotDiv' style={{ width: '100%', height: '100%' }}></div>\n              </Grid>\n\n\n\n              <Grid item xs={12} md={12} style={{ position: 'relative', width: '100%', height: '100%', maxWidth }}>\n                {doubleClickZoomHint}\n                <div id='tampTPlotDiv' style={{ width: '100%', height: '100%' }}></div>\n              </Grid>\n              <Grid item xs={12} md={12} className=\"containerLegend\">\n                <div id='tampTLegendDiv'></div>\n              </Grid>\n\n              <Grid item xs={12}>\n                {this.getContent()}\n              </Grid>\n            </Grid>\n          </div>\n\n        </TabPanel>\n\n        <TabPanel label={\"Growth Rate\"} value={value} index={3}>\n          <div>\n          <Grid container style={{height:window.innerHeight*75/100+'px'}}>\n               <Grid item xs={12} md={12} className=\"containerLegend\">\n                  <div id='growthRateLegendDiv'></div>\n               </Grid>\n               <Grid item xs={12} md={12} style={{ position: 'relative', width: '100%',height:'100%',maxWidth}}>\n                  {doubleClickZoomHint}\n                  <div id='growthRatePlotDiv' style={{ width: '100%',height:'100%'  }}></div>\n               </Grid>\n               <Grid item xs={12}>\n                 {this.getContent()}       \n               </Grid>\n            </Grid>\n          </div>\n        </TabPanel>\n\n        <TabPanel label={\"Proiezione\"} value={value} index={4}>\n          <div>\n              <Grid container style={{height:window.innerHeight*75/100+'px'}}>\n                  <Grid item xs={12} md={12} className=\"containerLegend\">\n                      <div id='projLegendDiv'></div>\n                  </Grid>\n                  <Grid item xs={12} md={12} style={{ position: 'relative', width: '100%',height:'100%',maxWidth}}>\n                      {doubleClickZoomHint}\n                      <div id='projPlotDiv' style={{ width: '100%',height:'100%'  }}></div>\n                  </Grid>\n                  <Grid item xs={12}>\n                      {this.getContent()}       \n                  </Grid>\n              </Grid>\n          </div>\n\n        </TabPanel>\n      </React.Fragment>\n    );\n  }\n}\nexport default PlotComponent;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport { Drawer, Grid } from '@material-ui/core';\nimport Hidden from '@material-ui/core/Hidden';\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport IconButton from '@material-ui/core/IconButton';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MailIcon from '@material-ui/icons/Mail';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport MultiSelect from './multiselect'\nimport { init as initProvinces } from 'covid-web/provinces'\nimport Ploty from './ploty'\nimport { getProvinces, getRegions } from 'covid-web/totaleCasi';\n\nconst drawerWidth = 300;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    // display: 'flex',\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  menuButton: {\n    border:'solid 1px #FFF',\n    borderRadius:'15px',\n    fontSize:'10px',\n    // marginRight: theme.spacing(2),\n    padding:'3px',\n    fontSize:'1rem'\n  },\n  // necessary for content to be below app bar\n  drawerPaper: {\n    // width: drawerWidth,\n    background: '#2c2e35',\n    color: '#FFF',\n    textAlign: 'center'\n  },\n  content: {\n    // flexGrow: 1,\n    // padding: theme.spacing(3),\n  },\n}));\n\nexport default function PersistentDrawerRight(props) {\n  const { container } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const [mobileOpen, setMobileOpen] = React.useState(false);\n\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const [types, setTypes] = React.useState('Provincia');\n  const [province, setProvince] = React.useState([])\n  const [regioni, setRegioni] = React.useState([])\n  const [regionValues, setRegionValues] = React.useState([\"Lombardia\", \"Veneto\"])\n  const [provinceValues, setProvinceValues] = React.useState([\"Bergamo\", \"Milano\", \"Venezia\"])\n  function setSelectedProvince(newValue) {\n    setProvinceValues(newValue)\n  }\n  function setSelectedRegion(newValue) {\n    setRegionValues(newValue)\n  }\n  React.useEffect(() => {\n\n    const foo = async () => {\n      await initProvinces()\n\n      setProvince(getProvinces().sort())\n      setRegioni(getRegions().sort())\n    }\n\n    foo()\n\n  }, [])\n\n  const handleType = (event, newFormats) => {\n    setTypes(newFormats);\n  };\n\n\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} >\n        <Grid container style={{ position: 'relative', top: '15px' }}>\n          <Grid item xs={6}>\n            <Typography variant=\"h6\" noWrap style={{ paddingLeft: 10, paddingBottom: 20 }}>\n              Filtra\n           </Typography>\n          </Grid>\n          <Grid item xs={6}>\n            <ArrowBackIosIcon style={{ float: 'right', cursor: 'pointer' }}\n              onClick={handleDrawerToggle}\n\n            />\n\n          </Grid>\n\n        </Grid>\n\n\n      </div>\n      <Divider />\n      <ToggleButtonGroup exclusive value={types} onChange={handleType} aria-label=\"aree_buttons\">\n        <ToggleButton value=\"Nazione\" aria-label=\"bold\">\n          Nazione\n        </ToggleButton>\n        <ToggleButton value=\"Regione\" aria-label=\"bold\">\n          Regioni\n            </ToggleButton>\n        <ToggleButton value=\"Province\" aria-label=\"bold\">\n          Province\n            </ToggleButton>\n      </ToggleButtonGroup>\n      <Divider />\n      <div style={{ display: types === 'Regione' ? 'block' : 'none' }}>\n        <MultiSelect id=\"regione\" values={regionValues} setvalue={setSelectedRegion} type={'Regioni'} lists={regioni} />\n      </div>\n      <div style={{ display: types === 'Province' ? 'block' : 'none' }}>\n        <MultiSelect id=\"province\" values={provinceValues} setvalue={setSelectedProvince} type={'Province'} lists={province} />\n      </div>\n      <div style={{ display: types === 'Nazione' ? 'block' : 'none' }}>\n        <MultiSelect id=\"nazione\" values={[\"Italia\"]} type={'Nazione'} lists={[\"Italia\"]} />\n      </div>\n\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      {/*\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n        </Toolbar>\n      </AppBar>\n      */}\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Drawer\n          container={container}\n          variant=\"temporary\"\n          anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          classes={{\n            paper: classes.drawerPaper,\n          }}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n        >\n          {drawer}\n        </Drawer>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n      {!mobileOpen ?\n        <Ploty \n          handleDrawerToggle={handleDrawerToggle}\n          types={types}\n          field={\n           types === \"Regione\"\n            ? 'denominazione_regione'\n            : 'denominazione_provincia'}\n          regionValues={regionValues}\n          provinceValues={provinceValues}\n        /> :\n        <></>}\n      </main>\n    </div>\n\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Layout from './components/layout'\nimport { Grid, Typography } from '@material-ui/core'\nimport CacheBuster from './components/CacheBuster'\nimport * as moment from 'moment'\n\nfunction App() {\n\n  return (\n    <CacheBuster>\n      {({ loading, isLatestVersion, refreshCacheAndReload }) => {\n        if (loading) return null;\n        if (!loading && !isLatestVersion) {\n          refreshCacheAndReload();\n        }\n\n        // refresh everything to get updated data from Protezione Civile\n        setTimeout(refreshCacheAndReload, moment.duration(5, 'hour').asMilliseconds())\n\n        return (<div id='App'>\n          <Grid container>\n            <Grid item xs={12}>\n              <Layout />\n\n            </Grid>\n            {/* <Grid item xs={12} className='footer'>\n            \n                  <Typography component=\"p\">\n                  I dati rappresentati in questi grafici sono forniti dalla <a href=\"https://github.com/pcm-dpc/COVID-19\">Protezione Civile</a>\n                  </Typography>\n                </Grid> */}\n          </Grid>\n        </div>)\n      }}\n    </CacheBuster>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}